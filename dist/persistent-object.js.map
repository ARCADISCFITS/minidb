{"version":3,"sources":["../src/persistent-object.js"],"names":["models","checkDatabase","db","PersistentObject","constructor","attributes","initializePersistentObject","_db","rowID","_rowID","updateFromDatabaseAttributes","findFirstColumns","ModelClass","columns","findFirstByAttributes","tableName","findFirst","row","instance","findAllColumns","findAllByAttributes","findAll","orderBy","rows","map","findEach","options","callback","findEachByAttributes","values","index","findOrCreate","create","count","result","modelMethods","slice","register","modelClass","push","includeInto","wrap","method","params","args","concat","apply","column","simple","varName","name","Object","defineProperty","prototype","get","set","value","enumerable","configurable","assignAttributes","_assignAttributes","key","keys","columnsByColumnName","_buildColumns","byColumnName","_columnsByColumnName","byAttributeName","_columnsByAttributeName","columnsByAttributeName","_updateFromDatabaseAttributes","fromDatabase","objectCreatedAt","created_at","type","objectUpdatedAt","updated_at","toNumber","id","databaseValues","toDatabase","integer","updateTimestamps","now","Date","_objectCreatedAt","_objectUpdatedAt","date","isPersisted","save","timestamps","rest","beforeSave","insert","pk","update","afterSave","delete","beforeDelete","afterDelete","loadOne","model","ivar","setOne"],"mappings":"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","file":"persistent-object.js","sourcesContent":["import {format} from 'util';\nimport Mixin from 'mixmatch';\nimport assert from 'assert';\nimport Database from './database';\n\nconst models = [];\n\nfunction checkDatabase(db) {\n  assert(db instanceof Database, 'invalid db');\n}\n\nexport default class PersistentObject extends Mixin {\n  constructor(db, attributes) {\n    super();\n\n    this.initializePersistentObject(db, attributes);\n  }\n\n  get db() {\n    return this._db;\n  }\n\n  get rowID() {\n    return this._rowID;\n  }\n\n  initializePersistentObject(db, attributes) {\n    this._db = db;\n\n    this.updateFromDatabaseAttributes(attributes || {}, db);\n\n    return this;\n  }\n\n  static async findFirstColumns(ModelClass, db, attributes, columns) {\n    return await db.findFirstByAttributes(ModelClass.tableName, columns, attributes);\n  }\n\n  static async findFirst(ModelClass, db, attributes) {\n    const row = await db.findFirstByAttributes(ModelClass.tableName, null, attributes);\n\n    if (row) {\n      const instance = new ModelClass();\n\n      instance.initializePersistentObject(db, row);\n\n      return instance;\n    }\n\n    return null;\n  }\n\n  static async findAllColumns(ModelClass, db, attributes, columns) {\n    return await db.findAllByAttributes(ModelClass.tableName, columns, attributes);\n  }\n\n  static async findAll(ModelClass, db, attributes, orderBy) {\n    const rows = await db.findAllByAttributes(ModelClass.tableName, null, attributes, orderBy);\n\n    return rows.map((row) => {\n      const instance = new ModelClass();\n\n      instance.initializePersistentObject(db, row);\n\n      return instance;\n    });\n  }\n\n  static findEach(ModelClass, db, options, callback) {\n    return db.findEachByAttributes({tableName: ModelClass.tableName, ...options}, async ({columns, values, index}) => {\n      if (values) {\n        const instance = new ModelClass();\n\n        instance.initializePersistentObject(db, values);\n\n        return await callback(instance, {columns, values, index});\n      }\n\n      return null;\n    });\n  }\n\n  static async findOrCreate(ModelClass, db, attributes) {\n    const row = await db.findFirstByAttributes(ModelClass.tableName, null, attributes);\n\n    const instance = new ModelClass();\n\n    instance.initializePersistentObject(db, row || attributes);\n\n    return instance;\n  }\n\n  static create(ModelClass, db, attributes) {\n    const instance = new ModelClass();\n\n    instance.initializePersistentObject(db, attributes);\n\n    return instance;\n  }\n\n  static async count(ModelClass, db, attributes) {\n    const result = await db.findFirstByAttributes(ModelClass.tableName, [ 'COUNT(1) AS count' ], attributes);\n\n    return result.count;\n  }\n\n  static get modelMethods() {\n    return [ 'findFirst', 'findFirstColumns', 'findAll', 'findAllColumns', 'findEach', 'findOrCreate', 'create', 'count' ];\n  }\n\n  static get models() {\n    return models.slice();\n  }\n\n  static register(modelClass) {\n    models.push(modelClass);\n\n    PersistentObject.includeInto(modelClass);\n\n    const wrap = (method) => {\n      return (...params) => {\n        const args = [ modelClass ].concat(params);\n        return PersistentObject[method].apply(PersistentObject, args);\n      };\n    };\n\n    for (const method of PersistentObject.modelMethods) {\n      modelClass[method] = wrap(method);\n    }\n\n    for (const column of modelClass.columns) {\n      if (column.simple) {\n        const varName = '_' + column.name;\n\n        Object.defineProperty(modelClass.prototype, column.name, {\n          get: () => {\n            return this[varName];\n          },\n          set: (value) => {\n            this[varName] = value;\n          },\n          enumerable: true,\n          configurable: true\n        });\n      }\n    }\n  }\n\n  assignAttributes(attributes) {\n    this._assignAttributes(attributes);\n  }\n\n  _assignAttributes(attributes) {\n    for (const key of Object.keys(attributes)) {\n      const column = this.columnsByColumnName[key];\n\n      if (column) {\n        this['_' + column.name] = attributes[column.column];\n      }\n    }\n  }\n\n  _buildColumns() {\n    const byColumnName = this.constructor._columnsByColumnName = {};\n    const byAttributeName = this.constructor._columnsByAttributeName = {};\n\n    for (const column of this.constructor.columns) {\n      byColumnName[column.column] = column;\n      byAttributeName[column.name] = column;\n    }\n  }\n\n  get columnsByColumnName() {\n    if (!this.constructor._columnsByColumnName) {\n      this._buildColumns();\n    }\n    return this.constructor._columnsByColumnName;\n  }\n\n  get columnsByAttributeName() {\n    if (!this.constructor._columnsByAttributeName) {\n      this._buildColumns();\n    }\n    return this.constructor._columnsByAttributeName;\n  }\n\n  updateFromDatabaseAttributes(attributes, db) {\n    this._updateFromDatabaseAttributes(attributes, db || this.db);\n  }\n\n  _updateFromDatabaseAttributes(attributes, db) {\n    db = db || this.db;\n\n    checkDatabase(db);\n\n    for (const key of Object.keys(attributes)) {\n      const column = this.columnsByColumnName[key];\n\n      if (column) {\n        this['_' + column.name] = db.fromDatabase(attributes[column.column], column);\n      }\n    }\n\n    this.objectCreatedAt = db.fromDatabase(attributes.created_at, {type: 'datetime'});\n    this.objectUpdatedAt = db.fromDatabase(attributes.updated_at, {type: 'datetime'});\n\n    this._rowID = this.toNumber(attributes.id);\n  }\n\n  attributes() {\n    const values = {};\n\n    for (const column of this.constructor.columns) {\n      const name = column.name;\n\n      values['_' + name] = this['_' + name];\n    }\n\n    return values;\n  }\n\n  databaseValues(db) {\n    db = db || this.db;\n\n    checkDatabase(db);\n\n    const values = {};\n\n    for (const column of this.constructor.columns) {\n      const name = column.name;\n      const value = this['_' + name];\n\n      // TODO(zhm) this doesn't work with the id attribute\n      // if (value == null && column.null === false) {\n      //   throw Error(format('column %s cannot be null', name));\n      // }\n\n      values[column.column] = db.toDatabase(value, column);\n    }\n\n    return values;\n  }\n\n  toNumber(integer) {\n    return integer != null ? +integer : null;\n  }\n\n  updateTimestamps() {\n    const now = new Date();\n\n    if (!this.objectCreatedAt) {\n      this.objectCreatedAt = now;\n    }\n\n    this.objectUpdatedAt = now;\n  }\n\n  get objectCreatedAt() {\n    return this._objectCreatedAt;\n  }\n\n  get objectUpdatedAt() {\n    return this._objectUpdatedAt;\n  }\n\n  set objectCreatedAt(date) {\n    this._objectCreatedAt = date;\n  }\n\n  set objectUpdatedAt(date) {\n    this._objectUpdatedAt = date;\n  }\n\n  get isPersisted() {\n    return this.rowID > 0;\n  }\n\n  async save({db, timestamps, ...rest} = {}) {\n    db = db || this.db;\n\n    checkDatabase(db);\n\n    if (this.beforeSave) {\n      const result = await this.beforeSave({db, timestamps, ...rest});\n\n      if (result === false) {\n        return this;\n      }\n    }\n\n    if (timestamps !== false) {\n      this.updateTimestamps();\n    }\n\n    const values = this.databaseValues(db);\n\n    values.created_at = db.toDatabase(this.objectCreatedAt, {type: 'datetime'});\n    values.updated_at = db.toDatabase(this.objectUpdatedAt, {type: 'datetime'});\n\n    if (!this.isPersisted) {\n      this._rowID = await db.insert(this.constructor.tableName, values, {pk: 'id'});\n    } else {\n      await db.update(this.constructor.tableName, {id: this.rowID}, values);\n    }\n\n    if (this.afterSave) {\n      await this.afterSave({db, timestamps, ...rest});\n    }\n\n    return this;\n  }\n\n  async delete({db, ...rest} = {}) {\n    db = db || this.db;\n\n    checkDatabase(db);\n\n    if (this.isPersisted) {\n      if (this.beforeDelete) {\n        const result = await this.beforeDelete({db, ...rest});\n\n        if (result === false) {\n          return this;\n        }\n      }\n\n      await db.delete(this.constructor.tableName, {id: this.rowID});\n\n      if (this.afterDelete) {\n        await this.afterDelete({db, ...rest});\n      }\n\n      this._rowID = null;\n      this.objectCreatedAt = null;\n      this.objectUpdatedAt = null;\n    }\n\n    return this;\n  }\n\n  async loadOne(name, model, id, db) {\n    db = db || this.db;\n\n    checkDatabase(db);\n\n    const ivar = '_' + name;\n\n    const pk = id || this[ivar + 'RowID'];\n\n    if (pk == null) {\n      return null;\n    }\n\n    if (this[ivar]) {\n      return this[ivar];\n    }\n\n    const instance = await model.findFirst(db, {id: pk});\n\n    this.setOne(name, instance);\n\n    return this[ivar];\n  }\n\n  setOne(name, instance) {\n    const ivar = '_' + name;\n\n    if (instance) {\n      this[ivar] = instance;\n      this[ivar + 'ID'] = instance.id;\n      this[ivar + 'RowID'] = instance.rowID;\n    } else {\n      this[ivar] = null;\n      this[ivar + 'ID'] = null;\n      this[ivar + 'RowID'] = null;\n    }\n  }\n}\n"]}