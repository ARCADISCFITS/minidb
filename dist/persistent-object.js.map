{"version":3,"sources":["../src/persistent-object.js"],"names":["models","checkDatabase","db","PersistentObject","constructor","attributes","initializePersistentObject","_db","rowID","_rowID","updateFromDatabaseAttributes","findFirstColumns","ModelClass","columns","findFirstByAttributes","tableName","findFirst","row","instance","findAllColumns","findAllByAttributes","findAll","orderBy","rows","map","findEach","options","callback","findEachByAttributes","values","index","findOrCreate","create","count","result","modelMethods","slice","register","modelClass","push","includeInto","wrap","method","params","args","concat","apply","assignAttributes","_assignAttributes","key","Object","keys","column","columnsByColumnName","name","_buildColumns","byColumnName","_columnsByColumnName","byAttributeName","_columnsByAttributeName","columnsByAttributeName","_updateFromDatabaseAttributes","value","fromDatabase","createdAt","created_at","type","updatedAt","updated_at","toNumber","id","databaseValues","toDatabase","integer","updateTimestamps","now","Date","isPersisted","save","timestamps","rest","beforeSave","insert","pk","update","afterSave","delete","beforeDelete","afterDelete","loadOne","model","ivar","setOne"],"mappings":"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","file":"persistent-object.js","sourcesContent":["import {format} from 'util';\nimport Mixin from 'mixmatch';\nimport assert from 'assert';\nimport Database from './database';\n\nconst models = [];\n\nfunction checkDatabase(db) {\n  assert(db instanceof Database, 'invalid db');\n}\n\nexport default class PersistentObject extends Mixin {\n  constructor(db, attributes) {\n    super();\n\n    this.initializePersistentObject(db, attributes);\n  }\n\n  get db() {\n    return this._db;\n  }\n\n  get rowID() {\n    return this._rowID;\n  }\n\n  initializePersistentObject(db, attributes) {\n    this._db = db;\n\n    this.updateFromDatabaseAttributes(attributes || {}, db);\n\n    return this;\n  }\n\n  static async findFirstColumns(ModelClass, db, attributes, columns) {\n    return await db.findFirstByAttributes(ModelClass.tableName, columns, attributes);\n  }\n\n  static async findFirst(ModelClass, db, attributes) {\n    const row = await db.findFirstByAttributes(ModelClass.tableName, null, attributes);\n\n    if (row) {\n      const instance = new ModelClass();\n\n      instance.initializePersistentObject(db, row);\n\n      return instance;\n    }\n\n    return null;\n  }\n\n  static async findAllColumns(ModelClass, db, attributes, columns) {\n    return await db.findAllByAttributes(ModelClass.tableName, columns, attributes);\n  }\n\n  static async findAll(ModelClass, db, attributes, orderBy) {\n    const rows = await db.findAllByAttributes(ModelClass.tableName, null, attributes, orderBy);\n\n    return rows.map((row) => {\n      const instance = new ModelClass();\n\n      instance.initializePersistentObject(db, row);\n\n      return instance;\n    });\n  }\n\n  static findEach(ModelClass, db, options, callback) {\n    return db.findEachByAttributes({tableName: ModelClass.tableName, ...options}, async ({columns, values, index}) => {\n      if (values) {\n        const instance = new ModelClass();\n\n        instance.initializePersistentObject(db, values);\n\n        return await callback(instance, {columns, values, index});\n      }\n\n      return null;\n    });\n  }\n\n  static async findOrCreate(ModelClass, db, attributes) {\n    const row = await db.findFirstByAttributes(ModelClass.tableName, null, attributes);\n\n    const instance = new ModelClass();\n\n    instance.initializePersistentObject(db, row || attributes);\n\n    return instance;\n  }\n\n  static create(ModelClass, db, attributes) {\n    const instance = new ModelClass();\n\n    instance.initializePersistentObject(db, attributes);\n\n    return instance;\n  }\n\n  static async count(ModelClass, db, attributes) {\n    const result = await db.findFirstByAttributes(ModelClass.tableName, [ 'COUNT(1) AS count' ], attributes);\n\n    return result.count;\n  }\n\n  static get modelMethods() {\n    return [ 'findFirst', 'findFirstColumns', 'findAll', 'findAllColumns', 'findEach', 'findOrCreate', 'create', 'count' ];\n  }\n\n  static get models() {\n    return models.slice();\n  }\n\n  static register(modelClass) {\n    models.push(modelClass);\n\n    PersistentObject.includeInto(modelClass);\n\n    const wrap = (method) => {\n      return (...params) => {\n        const args = [ modelClass ].concat(params);\n        return PersistentObject[method].apply(PersistentObject, args);\n      };\n    };\n\n    for (const method of PersistentObject.modelMethods) {\n      modelClass[method] = wrap(method);\n    }\n  }\n\n  assignAttributes(attributes) {\n    this._assignAttributes(attributes);\n  }\n\n  _assignAttributes(attributes) {\n    for (const key of Object.keys(attributes)) {\n      const column = this.columnsByColumnName[key];\n\n      if (column) {\n        this['_' + column.name] = attributes[column.column];\n      }\n    }\n  }\n\n  _buildColumns() {\n    const byColumnName = this.constructor._columnsByColumnName = {};\n    const byAttributeName = this.constructor._columnsByAttributeName = {};\n\n    for (const column of this.constructor.columns) {\n      byColumnName[column.column] = column;\n      byAttributeName[column.name] = column;\n    }\n  }\n\n  get columnsByColumnName() {\n    if (!this.constructor._columnsByColumnName) {\n      this._buildColumns();\n    }\n    return this.constructor._columnsByColumnName;\n  }\n\n  get columnsByAttributeName() {\n    if (!this.constructor._columnsByAttributeName) {\n      this._buildColumns();\n    }\n    return this.constructor._columnsByAttributeName;\n  }\n\n  updateFromDatabaseAttributes(attributes, db) {\n    this._updateFromDatabaseAttributes(attributes, db || this.db);\n  }\n\n  _updateFromDatabaseAttributes(attributes, db) {\n    db = db || this.db;\n\n    checkDatabase(db);\n\n    for (const column of this.constructor.columns) {\n      const name = '_' + column.name;\n      const value = attributes[column.column];\n\n      // if (value == null && column[2] && column[2].null === false) {\n      //   console.warn(format('column %s cannot be null', name));\n      // }\n\n      this[name] = db.fromDatabase(value, column);\n    }\n\n    this.createdAt = db.fromDatabase(attributes.created_at, {type: 'datetime'});\n    this.updatedAt = db.fromDatabase(attributes.updated_at, {type: 'datetime'});\n\n    this._rowID = this.toNumber(attributes.id);\n  }\n\n  attributes() {\n    const values = {};\n\n    for (const column of this.constructor.columns) {\n      const name = column.name;\n\n      values['_' + name] = this['_' + name];\n    }\n\n    return values;\n  }\n\n  databaseValues(db) {\n    db = db || this.db;\n\n    checkDatabase(db);\n\n    const values = {};\n\n    for (const column of this.constructor.columns) {\n      const name = column.name;\n      const value = this['_' + name];\n\n      // TODO(zhm) this doesn't work with the id attribute\n      // if (value == null && column.null === false) {\n      //   throw Error(format('column %s cannot be null', name));\n      // }\n\n      values[column.column] = db.toDatabase(value, column);\n    }\n\n    return values;\n  }\n\n  toNumber(integer) {\n    return integer != null ? +integer : null;\n  }\n\n  updateTimestamps() {\n    const now = new Date();\n\n    if (!this.createdAt) {\n      this.createdAt = now;\n    }\n\n    this.updatedAt = now;\n  }\n\n  get isPersisted() {\n    return this.rowID > 0;\n  }\n\n  async save({db, timestamps, ...rest} = {}) {\n    db = db || this.db;\n\n    checkDatabase(db);\n\n    if (this.beforeSave) {\n      const result = await this.beforeSave({db, timestamps, ...rest});\n\n      if (result === false) {\n        return this;\n      }\n    }\n\n    if (timestamps !== false) {\n      this.updateTimestamps();\n    }\n\n    const values = this.databaseValues(db);\n\n    values.created_at = db.toDatabase(this.createdAt, {type: 'datetime'});\n    values.updated_at = db.toDatabase(this.updatedAt, {type: 'datetime'});\n\n    if (!this.isPersisted) {\n      this._rowID = await db.insert(this.constructor.tableName, values, {pk: 'id'});\n    } else {\n      await db.update(this.constructor.tableName, {id: this.rowID}, values);\n    }\n\n    if (this.afterSave) {\n      await this.afterSave({db, timestamps, ...rest});\n    }\n\n    return this;\n  }\n\n  async delete({db, ...rest} = {}) {\n    db = db || this.db;\n\n    checkDatabase(db);\n\n    if (this.isPersisted) {\n      if (this.beforeDelete) {\n        const result = await this.beforeDelete({db, ...rest});\n\n        if (result === false) {\n          return this;\n        }\n      }\n\n      await db.delete(this.constructor.tableName, {id: this.rowID});\n\n      if (this.afterDelete) {\n        await this.afterDelete({db, ...rest});\n      }\n\n      this._rowID = null;\n      this.createdAt = null;\n      this.updatedAt = null;\n    }\n\n    return this;\n  }\n\n  async loadOne(name, model, id, db) {\n    db = db || this.db;\n\n    checkDatabase(db);\n\n    const ivar = '_' + name;\n\n    const pk = id || this[ivar + 'RowID'];\n\n    if (pk == null) {\n      return null;\n    }\n\n    if (this[ivar]) {\n      return this[ivar];\n    }\n\n    const instance = await model.findFirst(db, {id: pk});\n\n    this.setOne(name, instance);\n\n    return this[ivar];\n  }\n\n  setOne(name, instance) {\n    const ivar = '_' + name;\n\n    if (instance) {\n      this[ivar] = instance;\n      this[ivar + 'ID'] = instance.id;\n      this[ivar + 'RowID'] = instance.rowID;\n    } else {\n      this[ivar] = null;\n      this[ivar + 'ID'] = null;\n      this[ivar + 'RowID'] = null;\n    }\n  }\n}\n"]}