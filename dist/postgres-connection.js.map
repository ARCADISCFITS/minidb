{"version":3,"sources":["../src/postgres-connection.js"],"names":["POOLS","PostgresConnection","constructor","pool","rawClient","connectionString","params","db","max","idleTimeoutMillis","reapIntervalMillis","query","close","release","connect","Promise","resolve","reject","acquire","err","client","shutdown","connection","Object","keys","drain","destroyAllNow"],"mappings":";;;;;;AAAA;;AACA;;;;;;;;AAEA,MAAMA,QAAQ,EAAd;;AAEA;AACA;AACA;AACA;AACe,MAAMC,kBAAN,CAAyB;AACtCC,cAAYC,IAAZ,EAAkBC,SAAlB,EAA6B;AAC3B,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACD;;AAED,SAAOD,IAAP,CAAYE,gBAAZ,EAA8B;AAC5B,QAAIF,OAAOH,MAAMK,gBAAN,CAAX;;AAEA,QAAIF,QAAQ,IAAZ,EAAkB;AAChB,YAAMG,SAAS;AACbC,YAAIF,gBADS;AAEbG,aAAK,EAFQ;AAGbC,2BAAmBR,mBAAmBQ,iBAHzB;AAIbC,4BAAoBT,mBAAmBS;AAJ1B,OAAf;;AAOAP,aAAOH,MAAMK,gBAAN,IAA0B,wBAAWC,MAAX,CAAjC;AACD;;AAED,WAAOH,IAAP;AACD;;AAEDQ,UAAe;AACb,WAAO,6BAAmB,IAAnB,EAAyB,KAAKP,SAAL,CAAeO,KAAf,CAAqB,YAArB,CAAzB,CAAP;AACD;;AAEDC,UAAQ;AACN,SAAKT,IAAL,CAAUU,OAAV,CAAkB,KAAKT,SAAvB;AACA,SAAKA,SAAL,GAAiB,IAAjB;AACD;;AAED,SAAaU,OAAb,CAAqBT,gBAArB,EAAuC;AAAA;AACrC,aAAO,IAAIU,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAMd,OAAOF,mBAAmBE,IAAnB,CAAwBE,gBAAxB,CAAb;;AAEAF,aAAKe,OAAL,CAAa,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC5B,cAAID,GAAJ,EAAS;AACP,mBAAOF,OAAOE,GAAP,CAAP;AACD;;AAED,iBAAOH,QAAQ,IAAIf,kBAAJ,CAAuBE,IAAvB,EAA6BiB,MAA7B,CAAR,CAAP;AACD,SAND;AAOD,OAVM,CAAP;AADqC;AAYtC;;AAED,SAAOC,QAAP,GAAkB;AAChB,SAAK,MAAMC,UAAX,IAAyBC,OAAOC,IAAP,CAAYxB,KAAZ,CAAzB,EAA6C;AAC3C,YAAMG,OAAOH,MAAMsB,UAAN,CAAb;;AAEA,UAAInB,IAAJ,EAAU;AACRA,aAAKsB,KAAL,CAAW,MAAM;AACftB,eAAKuB,aAAL;AACD,SAFD;AAGD;AACF;AACF;AAxDqC;;kBAAnBzB,kB;AA2DrBA,mBAAmBQ,iBAAnB,GAAuC,IAAvC;AACAR,mBAAmBS,kBAAnB,GAAwC,IAAxC","file":"postgres-connection.js","sourcesContent":["import { createPool } from 'minipg';\nimport PostgresCursor from './postgres-cursor';\n\nconst POOLS = {};\n\n// Wrap a single connection w/ a query method in an async function.\n// This is used when we need to execute multiple successive queries and make sure\n// they're executed on the *same* connection and not separate connections\n// from the connection pool.\nexport default class PostgresConnection {\n  constructor(pool, rawClient) {\n    this.pool = pool;\n    this.rawClient = rawClient;\n  }\n\n  static pool(connectionString) {\n    let pool = POOLS[connectionString];\n\n    if (pool == null) {\n      const params = {\n        db: connectionString,\n        max: 25,\n        idleTimeoutMillis: PostgresConnection.idleTimeoutMillis,\n        reapIntervalMillis: PostgresConnection.reapIntervalMillis\n      };\n\n      pool = POOLS[connectionString] = createPool(params);\n    }\n\n    return pool;\n  }\n\n  query(...args) {\n    return new PostgresCursor(this, this.rawClient.query(...args));\n  }\n\n  close() {\n    this.pool.release(this.rawClient);\n    this.rawClient = null;\n  }\n\n  static async connect(connectionString) {\n    return new Promise((resolve, reject) => {\n      const pool = PostgresConnection.pool(connectionString);\n\n      pool.acquire((err, client) => {\n        if (err) {\n          return reject(err);\n        }\n\n        return resolve(new PostgresConnection(pool, client));\n      });\n    });\n  }\n\n  static shutdown() {\n    for (const connection of Object.keys(POOLS)) {\n      const pool = POOLS[connection];\n\n      if (pool) {\n        pool.drain(() => {\n          pool.destroyAllNow();\n        });\n      }\n    }\n  }\n}\n\nPostgresConnection.idleTimeoutMillis = null;\nPostgresConnection.reapIntervalMillis = null;\n"]}