{"version":3,"sources":["../src/postgres.js"],"names":["types","setTypeParser","val","parseInt","Postgres","constructor","options","client","ident","value","setNoticeProcessor","processor","defaultNoticeProcessor","connect","db","shutdown","dialect","_each","sql","params","callback","log","close","cursor","query","hasRows","result","next","columns","values","index","ex","verbose","console","error","err","_execute","resultColumns","rows","push","beginTransaction","Error","execute","commit","rollback","transaction","block","Object","assign","rollbackError","using","connection","arrayFormatString","array","Number","isInteger","buildWhere","where","clause","key","keys","Array","isArray","buildInsert","attributes","includeNames","names","placeholders","raw","buildUpdate","sets","insertStatement","table","pk","returning","returnPrimaryKey","join","insertStatements","arrayOfAttributes","arrayOfValues","insert","statement","all","id","toDatabase","column","type","toISOString","fromDatabase","Date"],"mappings":"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","file":"postgres.js","sourcesContent":["import PostgresConnection from './postgres-connection';\nimport pg from 'pg';\nimport { Client } from 'minipg';\nimport pgformat from 'pg-format';\nimport { format } from 'util';\nimport esc from './esc';\nimport Database from './database';\n\n// Parse bigints as `Number` objects. If a caller *really* knows their\n// number cannot fit in a JS Number, it can be casted to `text` in\n// the query and parsed manually. Without this, dead simple COUNT(*)\n// queries are returned as text and it makes doing simple things hard.\npg.types.setTypeParser(20, (val) => {\n  return val == null ? null : parseInt(val, 10);\n});\n\nexport default class Postgres extends Database {\n  constructor(options) {\n    super(options);\n\n    this.client = options.client;\n  }\n\n  ident(value) {\n    return esc(value, '\"');\n  }\n\n  static setNoticeProcessor(processor) {\n    Client.defaultNoticeProcessor = processor;\n  }\n\n  static async connect(db) {\n    return await PostgresConnection.connect(db);\n  }\n\n  static shutdown() {\n    PostgresConnection.shutdown();\n  }\n\n  get dialect() {\n    return 'postgresql';\n  }\n\n  async _each(sql, params, callback) {\n    this.log(sql);\n\n    let close = false;\n    let client = this.client;\n    let cursor = null;\n\n    if (client == null) {\n      close = true;\n      client = await Postgres.connect(this.options);\n    }\n\n    try {\n      cursor = client.query(sql);\n\n      while (cursor.hasRows) {\n        const result = await cursor.next();\n\n        if (result && callback) {\n          /* eslint-disable callback-return */\n          await callback({columns: result.columns, values: result.values, index: result.index, cursor});\n          /* eslint-enable callback-return */\n        }\n      }\n    } catch (ex) {\n      if (this.verbose) {\n        console.error('ERROR', ex);\n      }\n\n      throw ex;\n    } finally {\n      if (cursor) {\n        try {\n          await cursor.close();\n        } catch (err) {\n          // Closing the cursor on a connection where there was a previous error rethrows the same error\n          // This is because pumping the cursor to completion ends up carrying the original error to\n          // the end. This is desired behavior, we just have to swallow any potential errors here.\n        }\n      }\n\n      if (close) {\n        await client.close();\n      }\n    }\n  }\n\n  async close() {\n    if (this.client) {\n      await this.client.close();\n\n      this.client = null;\n    }\n  }\n\n  async query(sql, params) {\n    this.log(sql);\n\n    let client = this.client;\n\n    if (client == null) {\n      client = await Postgres.connect(this.options.db);\n    }\n\n    return client.query(sql, params);\n  }\n\n  async _execute(sql, params) {\n    let resultColumns = null;\n    const rows = [];\n\n    await this._each(sql, [], async ({columns, values, index, cursor}) => {\n      if (resultColumns == null) {\n        resultColumns = columns;\n      }\n\n      if (values) {\n        rows.push(values);\n      }\n    });\n\n    return { rows: rows, columns: resultColumns };\n  }\n\n  beginTransaction() {\n    if (this.client == null) {\n      throw new Error('client is null when beginning a transaction');\n    }\n\n    return this.execute('BEGIN TRANSACTION;');\n  }\n\n  commit() {\n    if (this.client == null) {\n      throw new Error('client is null when committing a transaction');\n    }\n\n    return this.execute('COMMIT TRANSACTION;');\n  }\n\n  rollback() {\n    if (this.client == null) {\n      throw new Error('client is null when rolling back a transaction');\n    }\n\n    return this.execute('ROLLBACK TRANSACTION;');\n  }\n\n  async transaction(block) {\n    // get a connection from the pool and make sure it gets used throughout the\n    // transaction block.\n    const client = await Postgres.connect(this.options);\n\n    const db = new Postgres(Object.assign({}, this.options, {client: client}));\n\n    await db.beginTransaction();\n\n    try {\n      await block(db);\n      await db.commit();\n    } catch (ex) {\n      try {\n        await db.rollback();\n      } catch (rollbackError) {\n        await db.close();\n        throw rollbackError;\n      }\n\n      throw ex;\n    } finally {\n      await db.close();\n    }\n  }\n\n  static transaction(options, block) {\n    if (options instanceof Postgres) {\n      return options.transaction(block);\n    }\n\n    return new Postgres(options).transaction(block);\n  }\n\n  static async using(options, block) {\n    const connection = await Postgres.connect(options);\n\n    const db = new Postgres(Object.assign({}, options, {client: connection}));\n\n    try {\n      await block(db);\n    } finally {\n      await connection.close();\n    }\n  }\n\n  arrayFormatString(array) {\n    if (Number.isInteger(array[0])) {\n      return 'ARRAY[%L]::bigint[]';\n    } else if (typeof array[0] === 'number') {\n      return 'ARRAY[%L]::double precision[]';\n    }\n\n    return 'ARRAY[%L]';\n  }\n\n  buildWhere(where) {\n    const clause = [];\n\n    if (where) {\n      for (const key of Object.keys(where)) {\n        const value = where[key];\n\n        if (value == null) {\n          clause.push(pgformat('%I IS NULL', key));\n        } else if (Array.isArray(value)) {\n          clause.push(pgformat('%I = ANY (' + this.arrayFormatString(where[key]) + ')', key, value));\n        } else {\n          clause.push(pgformat('%I = %L', key, value));\n        }\n      }\n    }\n\n    return [ clause, [] ];\n  }\n\n  buildInsert(attributes, includeNames = true) {\n    const names = [];\n    const values = [];\n    const placeholders = [];\n\n    // Use the literal values instead of placeholders  because parameterized\n    // queries require prepared statements. Prepared statements are stateful\n    // and impose requirements on the connection that are incompatible with\n    // pgbouncer.\n    for (const key of Object.keys(attributes)) {\n      if (includeNames) {\n        names.push(pgformat('%I', key));\n      }\n\n      const value = attributes[key];\n\n      if (Array.isArray(value)) {\n        placeholders.push(pgformat('ARRAY[%L]', value));\n      } else if (value && value.raw) {\n        placeholders.push(pgformat('%s', value.raw));\n      } else {\n        placeholders.push(pgformat('%L', value));\n      }\n    }\n\n    return [ names, placeholders, values ];\n  }\n\n  buildUpdate(attributes) {\n    const sets = [];\n    const values = [];\n\n    for (const key of Object.keys(attributes)) {\n      const value = attributes[key];\n\n      if (Array.isArray(value)) {\n        sets.push(pgformat('%I = ARRAY[%L]', key, value));\n      } else if (value && value.raw) {\n        sets.push(pgformat('%I = %s', value.raw));\n      } else {\n        sets.push(pgformat('%I = %L', key, value));\n      }\n    }\n\n    return [ sets, values ];\n  }\n\n  insertStatement(table, attributes, options) {\n    if (options == null || options.pk == null) {\n      throw new Error('pk is required');\n    }\n\n    const [ names, placeholders, values ] = this.buildInsert(attributes);\n\n    const returning = options && options.returnPrimaryKey === false ? '' : ' RETURNING ' + options.pk;\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES (%s)%s;',\n                       table,\n                       names.join(', '),\n                       placeholders.join(', '),\n                       returning);\n\n    return {sql, values};\n  }\n\n  insertStatements(table, arrayOfAttributes, options) {\n    const arrayOfValues = [];\n\n    let names = null;\n\n    for (const attributes of arrayOfAttributes) {\n      const insert = this.buildInsert(attributes, names == null);\n\n      if (names == null) {\n        names = insert[0];\n      }\n\n      arrayOfValues.push('(' + insert[1].join(', ') + ')');\n    }\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES %s;',\n                       table,\n                       names.join(', '),\n                       arrayOfValues.join(',\\n'));\n\n    return {sql, values: {}};\n  }\n\n  async insert(table, attributes, options) {\n    const statement = this.insertStatement(table, attributes, options);\n\n    const result = await this.all(statement.sql, statement.values);\n\n    return +result[0].id;\n  }\n\n  toDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return value.toISOString();\n\n      default:\n        return super.toDatabase(value, column);\n    }\n  }\n\n  fromDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return new Date(value);\n\n      default:\n        return super.fromDatabase(value, column);\n    }\n  }\n}\n"]}