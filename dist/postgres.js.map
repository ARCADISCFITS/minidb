{"version":3,"sources":["../src/postgres.js"],"names":[],"mappings":"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","file":"postgres.js","sourcesContent":["// import Promise from 'bluebird';\nimport connection from './postgres-connection';\nimport pg from 'pg';\nimport { Client } from 'minipg';\nimport pgformat from 'pg-format';\nimport { format } from 'util';\nimport esc from './esc';\nimport Database from './database';\n\n// Parse bigints as `Number` objects. If a caller *really* knows their\n// number cannot fit in a JS Number, it can be casted to `text` in\n// the query and parsed manually. Without this, dead simple COUNT(*)\n// queries are returned as text and it makes doing simple things hard.\npg.types.setTypeParser(20, (val) => {\n  return val == null ? null : parseInt(val, 10);\n});\n\nexport default class Postgres extends Database {\n  constructor(options) {\n    super(options);\n\n    this.client = options.client;\n  }\n\n  ident(value) {\n    return esc(value, '\"');\n  }\n\n  static setNoticeProcessor(processor) {\n    Client.defaultNoticeProcessor = processor;\n  }\n\n  static async connect(db) {\n    return await connection(db);\n  }\n\n  static shutdown() {\n    connection.shutdown();\n  }\n\n  get dialect() {\n    return 'postgresql';\n  }\n\n  async each(sql, params, callback) {\n    const exec = (client) => {\n      return new Promise((resolve, reject) => {\n        client.rawClient.query(sql).each((err, finished, columns, values, index) => {\n          if (err) {\n            return reject(err);\n          } else if (finished) {\n            return resolve(null);\n          }\n\n          if (!callback) {\n            return null;\n          }\n\n          let parsedValues = null;\n\n          if (values) {\n            parsedValues = {};\n\n            for (let i = 0; i < columns.length; ++i) {\n              let value = values[i];\n\n              if (value != null) {\n                value = pg.types.getTypeParser(columns[i].type)(value);\n              }\n\n              parsedValues[columns[i].name] = value;\n            }\n          }\n\n          return callback(columns, parsedValues, index);\n        });\n      });\n    };\n\n    let close = false;\n    let client = this.client;\n\n    if (client == null) {\n      close = true;\n      client = await Postgres.connect(this.options.db);\n    }\n\n    try {\n      await exec(client);\n    } catch (ex) {\n      if (this.verbose) {\n        console.error('ERROR', ex);\n      }\n\n      if (close) {\n        await client.done();\n      }\n\n      throw ex;\n    }\n\n    if (close) {\n      await client.done();\n    }\n  }\n\n  async close() {\n    if (this.client) {\n      await this.client.done();\n\n      this.client = null;\n    }\n  }\n\n  async execute(sql, params) {\n    return await this.each(sql, [], null);\n  }\n\n  beginTransaction() {\n    if (this.client == null) {\n      throw new Error('client is null when beginning a transaction');\n    }\n\n    return this.execute('BEGIN TRANSACTION;');\n  }\n\n  commit() {\n    if (this.client == null) {\n      throw new Error('client is null when committing a transaction');\n    }\n\n    return this.execute('COMMIT TRANSACTION;');\n  }\n\n  rollback() {\n    if (this.client == null) {\n      throw new Error('client is null when rolling back a transaction');\n    }\n\n    return this.execute('ROLLBACK TRANSACTION;');\n  }\n\n  async transaction(block) {\n    // get a connection from the pool and make sure it gets used throughout the\n    // transaction block.\n    const client = await Postgres.connect(this.options.db);\n\n    const db = new Postgres(Object.assign({}, this.options, {client: client}));\n\n    await db.beginTransaction();\n\n    try {\n      await block(db);\n      await db.commit();\n      await db.close();\n    } catch (ex) {\n      await db.rollback();\n      throw ex;\n    }\n  }\n\n  buildWhere(where) {\n    const clause = [];\n\n    if (where) {\n      for (const key of Object.keys(where)) {\n        clause.push(pgformat('%I = %L', key, where[key]));\n      }\n    }\n\n    return [ clause, [] ];\n  }\n\n  buildInsert(attributes) {\n    const names = [];\n    const values = [];\n    const placeholders = [];\n\n    // Use the literal values instead of placeholders  because parameterized\n    // queries require prepared statements. Prepared statements are stateful\n    // and impose requirements on the connection that are incompatible with\n    // pgbouncer.\n    for (const key of Object.keys(attributes)) {\n      names.push(pgformat('%I', key));\n\n      const value = attributes[key];\n\n      if (Array.isArray(value)) {\n        placeholders.push(pgformat('ARRAY[%L]', value));\n      } else {\n        placeholders.push(pgformat('%L', value));\n      }\n    }\n\n    return [ names, placeholders, values ];\n  }\n\n  buildUpdate(attributes) {\n    const sets = [];\n    const values = [];\n\n    for (const key of Object.keys(attributes)) {\n      const value = attributes[key];\n\n      if (Array.isArray(value)) {\n        sets.push(pgformat('%I = ARRAY[%L]', key, value));\n      } else {\n        sets.push(pgformat('%I = %L', key, value));\n      }\n    }\n\n    return [ sets, values ];\n  }\n\n  async insert(table, attributes, options) {\n    if (options == null || options.pk == null) {\n      throw new Error('pk is required');\n    }\n\n    const [ names, placeholders, values ] = this.buildInsert(attributes);\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES (%s) RETURNING %s;',\n                       table,\n                       names.join(', '),\n                       placeholders.join(', '),\n                       options.pk);\n\n    const result = await this.all(sql, values);\n\n    return +result[0].id;\n  }\n\n  toDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return value.toISOString();\n\n      default:\n        return super.toDatabase(value, column);\n    }\n  }\n\n  fromDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return new Date(value);\n\n      default:\n        return super.fromDatabase(value, column);\n    }\n  }\n}\n"]}