{"version":3,"sources":["../src/sqlite.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;AAEe,MAAM,MAAN,4BAA8B;AAC3C,MAAI,OAAJ,GAAc;AACZ,WAAO,QAAP,CADY;GAAd;;AAIA,SAAa;;;;;qBAEU,MAAK,OAAL;YAAd;YAAM;;;AAEb,YAAM,cAAc,iBAAO,cAAP,GAAwB,iBAAO,WAAP;;AAE5C,YAAM,UAAU,uBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC/C,cAAM,KAAK,IAAI,iBAAO,QAAP,CAAgB,IAApB,EAA0B,QAAQ,IAAR,GAAe,IAAf,GAAsB,WAAtB,EAAmC,UAAC,GAAD,EAAS;AAC/E,cAAI,GAAJ,EAAS;AACP,mBAAO,GAAP,EADO;WAAT,MAEO;AACL,oBAAQ,EAAR,EADK;WAFP;SADsE,CAAlE,CADyC;OAArB,CAAtB;;AAUN,YAAK,EAAL,GAAU,MAAM,OAAN;;AAEV,UAAI,MAAK,OAAL,CAAa,GAAb,EAAkB;AACpB,cAAM,MAAK,OAAL,CAAa,yBAAb,CAAN,CADoB;OAAtB;;AAIA,UAAI,MAAK,OAAL,CAAa,UAAb,EAAyB;AAC3B,cAAM,MAAK,OAAL,CAAa,gCAAb,CAAN,CAD2B;OAA7B;;AAIA,UAAI,MAAK,OAAL,CAAa,WAAb,EAA0B;AAC5B,cAAM,MAAK,OAAL,CAAa,wBAAwB,MAAK,OAAL,CAAa,WAAb,CAAyB,WAAzB,EAAxB,CAAnB,CAD4B;OAA9B;SA1BW;GAAb;;AA+BA,UAAc;;;;AACZ,YAAM,aAAN;;AAEA,YAAM,UAAU,uBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC/C,aAAK,EAAL,CAAQ,KAAR,CAAc,UAAC,GAAD,EAAS;AACrB,cAAI,GAAJ,EAAS;AACP,mBAAO,GAAP,EADO;WAAT,MAEO;AACL,sBADK;WAFP;SADY,CAAd,CAD+C;OAArB,CAAtB;;AAUN,YAAM,OAAN;;AAEA,aAAK,EAAL,GAAU,IAAV;SAfY;GAAd;;AAkBA,OAAK,GAAL,EAAU,MAAV,EAAkB,QAAlB,EAA4B;AAC1B,UAAM,OAAO,IAAP,CADoB;;AAG1B,WAAO,uBAAY,CAAC,OAAD,EAAU,MAAV,KAAqB;AACtC,UAAI,QAAQ,CAAC,CAAD,CAD0B;AAEtC,UAAI,UAAU,IAAV,CAFkC;;AAItC,YAAM,KAAK,CAAC,GAAD,EAAM,GAAN,KAAc;AACvB,YAAI,GAAJ,EAAS;AACP,iBAAO,OAAO,GAAP,CAAP,CADO;SAAT;;AAIA,UAAE,KAAF,CALuB;;AAOvB,YAAI,WAAW,IAAX,EAAiB;AACnB,oBAAU,OAAO,IAAP,CAAY,GAAZ,CAAV,CADmB;SAArB;;AAIA,eAAO,SAAS,OAAT,EAAkB,GAAlB,EAAuB,KAAvB,CAAP,CAXuB;OAAd,CAJ2B;;AAkBtC,YAAM,WAAW,OAAS;AACxB,YAAI,GAAJ,EAAS;AACP,iBAAO,OAAO,GAAP,CAAP,CADO;SAAT,MAEO;AACL,iBAAO,QAAQ,IAAR,CAAP,CADK;SAFP;OADe,CAlBqB;;AA0BtC,UAAI,OAAO,CAAC,GAAD,EAAM,MAAN,CAAa,MAAb,EAAqB,MAArB,CAA4B,EAA5B,EAAgC,QAAhC,CAAP,CA1BkC;;AA4BtC,UAAI,KAAK,OAAL,EAAc;AAChB,gBAAQ,GAAR,CAAY,GAAZ,EAAiB,MAAjB,EADgB;OAAlB;;AAIA,WAAK,EAAL,CAAQ,IAAR,CAAa,KAAb,CAAmB,KAAK,EAAL,EAAS,IAA5B,EAhCsC;KAArB,CAAnB,CAH0B;GAA5B;;AAuCA,UAAc,GAAd,EAAmB,MAAnB,EAA2B;;;;AACzB,eAAS,UAAU,EAAV;;AAET,aAAO,uBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,YAAI,OAAK,OAAL,EAAc;AAChB,kBAAQ,GAAR,CAAY,GAAZ,EAAiB,MAAjB,EADgB;SAAlB;;AAIA,cAAM,aAAN,CALsC;;AAOtC,eAAK,EAAL,CAAQ,GAAR,CAAY,GAAZ,EAAiB,MAAjB,EAAyB,UAAS,GAAT,EAAc;AACrC,cAAI,GAAJ,EAAS;AACP,iBAAK,MAAL,GAAc,IAAd,CADO;AAEP,iBAAK,OAAL,GAAe,IAAf,CAFO;;AAIP,gBAAI,KAAK,OAAL,EAAc;AAChB,sBAAQ,KAAR,CAAc,OAAd,EAAuB,GAAvB,EADgB;aAAlB;;AAIA,mBAAO,OAAO,GAAP,CAAP,CARO;WAAT,MASO;AACL,iBAAK,MAAL,GAAc,KAAK,MAAL,CADT;AAEL,iBAAK,OAAL,GAAe,KAAK,OAAL,CAFV;;AAIL,mBAAO,QAAQ,IAAR,CAAP,CAJK;WATP;SADuB,CAAzB,CAPsC;OAArB,CAAnB;SAHyB;GAA3B;;AA8BA,aAAW,KAAX,EAAkB,MAAlB,EAA0B;AACxB,QAAI,SAAS,IAAT,EAAe;AACjB,aAAO,IAAP,CADiB;KAAnB;;AAIA,YAAQ,OAAO,IAAP;AACN,WAAK,UAAL;AACE,eAAO,MAAM,OAAN,EAAP,CADF;;AADF;AAKI,eAAO,MAAM,UAAN,CAAiB,KAAjB,EAAwB,MAAxB,CAAP,CADF;AAJF,KALwB;GAA1B;;AAcA,eAAa,KAAb,EAAoB,MAApB,EAA4B;AAC1B,QAAI,SAAS,IAAT,EAAe;AACjB,aAAO,IAAP,CADiB;KAAnB;;AAIA,YAAQ,OAAO,IAAP;AACN,WAAK,UAAL;AACE,eAAO,IAAI,IAAJ,CAAS,CAAC,KAAD,CAAhB,CADF;;AADF;AAKI,eAAO,MAAM,YAAN,CAAmB,KAAnB,EAA0B,MAA1B,CAAP,CADF;AAJF,KAL0B;GAA5B;CAzIa;kBAAM","file":"sqlite.js","sourcesContent":["import Promise from 'bluebird';\nimport sqlite from 'sqlite3';\nimport Database from './database';\n\nexport default class SQLite extends Database {\n  get dialect() {\n    return 'sqlite';\n  }\n\n  async open() {\n    // https://phabricator.babeljs.io/T2765\n    const {file, mode} = this.options;\n\n    const defaultMode = sqlite.OPEN_READWRITE | sqlite.OPEN_CREATE;\n\n    const promise = new Promise((resolve, reject) => {\n      const db = new sqlite.Database(file, mode != null ? mode : defaultMode, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(db);\n        }\n      });\n    });\n\n    this.db = await promise;\n\n    if (this.options.wal) {\n      await this.execute('PRAGMA journal_mode=WAL');\n    }\n\n    if (this.options.autoVacuum) {\n      await this.execute('PRAGMA auto_vacuum=INCREMENTAL');\n    }\n\n    if (this.options.synchronous) {\n      await this.execute('PRAGMA synchronous=' + this.options.synchronous.toUpperCase());\n    }\n  }\n\n  async close() {\n    const self = this;\n\n    const promise = new Promise((resolve, reject) => {\n      self.db.close((err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n\n    await promise;\n\n    this.db = null;\n  }\n\n  each(sql, params, callback) {\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      let index = -1;\n      let columns = null;\n\n      const cb = (err, row) => {\n        if (err) {\n          return reject(err);\n        }\n\n        ++index;\n\n        if (columns == null) {\n          columns = Object.keys(row);\n        }\n\n        return callback(columns, row, index);\n      };\n\n      const complete = (err) => {\n        if (err) {\n          return reject(err);\n        } else {\n          return resolve(null);\n        }\n      };\n\n      let args = [sql].concat(params).concat(cb, complete);\n\n      if (self.verbose) {\n        console.log(sql, params);\n      }\n\n      self.db.each.apply(self.db, args);\n    });\n  }\n\n  async execute(sql, params) {\n    params = params || [];\n\n    return new Promise((resolve, reject) => {\n      if (this.verbose) {\n        console.log(sql, params);\n      }\n\n      const self = this;\n\n      this.db.run(sql, params, function(err) {\n        if (err) {\n          self.lastID = null;\n          self.changes = null;\n\n          if (self.verbose) {\n            console.error('ERROR', err);\n          }\n\n          return reject(err);\n        } else {\n          self.lastID = this.lastID;\n          self.changes = this.changes;\n\n          return resolve(null);\n        }\n      });\n    });\n  }\n\n  toDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return value.getTime();\n\n      default:\n        return super.toDatabase(value, column);\n    }\n  }\n\n  fromDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return new Date(+value);\n\n      default:\n        return super.fromDatabase(value, column);\n    }\n  }\n}\n"]}