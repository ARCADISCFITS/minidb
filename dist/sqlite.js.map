{"version":3,"sources":["../src/sqlite.js"],"names":["SQLite","dialect","open","options","file","mode","defaultMode","OPEN_READWRITE","OPEN_CREATE","promise","resolve","reject","db","Database","err","wal","execute","autoVacuum","synchronous","toUpperCase","close","each","sql","params","callback","index","columns","cb","row","Object","keys","complete","args","concat","verbose","console","log","apply","self","run","handler","lastID","changes","error","toDatabase","value","column","type","getTime","fromDatabase","Date"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;AAEe,MAAMA,MAAN,4BAA8B;AAC3C,MAAIC,OAAJ,GAAc;AACZ,WAAO,QAAP;AACD;;AAEKC,MAAN,GAAa;AAAA;;AAAA;AACX;AADW,qBAEU,MAAKC,OAFf;AAAA,YAEJC,IAFI,YAEJA,IAFI;AAAA,YAEEC,IAFF,YAEEA,IAFF;;;AAIX,YAAMC,cAAc,iBAAOC,cAAP,GAAwB,iBAAOC,WAAnD;;AAEA,YAAMC,UAAU,uBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/C,cAAMC,KAAK,IAAI,iBAAOC,QAAX,CAAoBT,IAApB,EAA0BC,QAAQ,IAAR,GAAeA,IAAf,GAAsBC,WAAhD,EAA6D,UAACQ,GAAD,EAAS;AAC/E,cAAIA,GAAJ,EAAS;AACPH,mBAAOG,GAAP;AACD,WAFD,MAEO;AACLJ,oBAAQE,EAAR;AACD;AACF,SANU,CAAX;AAOD,OARe,CAAhB;;AAUA,YAAKA,EAAL,GAAU,MAAMH,OAAhB;;AAEA,UAAI,MAAKN,OAAL,CAAaY,GAAjB,EAAsB;AACpB,cAAM,MAAKC,OAAL,CAAa,yBAAb,CAAN;AACD;;AAED,UAAI,MAAKb,OAAL,CAAac,UAAjB,EAA6B;AAC3B,cAAM,MAAKD,OAAL,CAAa,gCAAb,CAAN;AACD;;AAED,UAAI,MAAKb,OAAL,CAAae,WAAjB,EAA8B;AAC5B,cAAM,MAAKF,OAAL,CAAa,wBAAwB,MAAKb,OAAL,CAAae,WAAb,CAAyBC,WAAzB,EAArC,CAAN;AACD;AA5BU;AA6BZ;;AAEKC,OAAN,GAAc;AAAA;;AAAA;AACZ,YAAMX,UAAU,uBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/C,eAAKC,EAAL,CAAQQ,KAAR,CAAc,UAACN,GAAD,EAAS;AACrB,cAAIA,GAAJ,EAAS;AACPH,mBAAOG,GAAP;AACD,WAFD,MAEO;AACLJ;AACD;AACF,SAND;AAOD,OARe,CAAhB;;AAUA,YAAMD,OAAN;;AAEA,aAAKG,EAAL,GAAU,IAAV;AAbY;AAcb;;AAEDS,OAAKC,GAAL,EAAUC,MAAV,EAAkBC,QAAlB,EAA4B;AAC1B,WAAO,uBAAY,CAACd,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAIc,QAAQ,CAAC,CAAb;AACA,UAAIC,UAAU,IAAd;;AAEA,YAAMC,KAAK,CAACb,GAAD,EAAMc,GAAN,KAAc;AACvB,YAAId,GAAJ,EAAS;AACP,iBAAOH,OAAOG,GAAP,CAAP;AACD;;AAED,UAAEW,KAAF;;AAEA,YAAIC,WAAW,IAAf,EAAqB;AACnBA,oBAAUG,OAAOC,IAAP,CAAYF,GAAZ,CAAV;AACD;;AAED,eAAOJ,SAASE,OAAT,EAAkBE,GAAlB,EAAuBH,KAAvB,CAAP;AACD,OAZD;;AAcA,YAAMM,WAAYjB,GAAD,IAAS;AACxB,YAAIA,GAAJ,EAAS;AACP,iBAAOH,OAAOG,GAAP,CAAP;AACD;;AAED,eAAOJ,QAAQ,IAAR,CAAP;AACD,OAND;;AAQA,YAAMsB,OAAO,CAAEV,GAAF,EAAQW,MAAR,CAAeV,MAAf,EAAuBU,MAAvB,CAA8BN,EAA9B,EAAkCI,QAAlC,CAAb;;AAEA,UAAI,KAAKG,OAAT,EAAkB;AAChBC,gBAAQC,GAAR,CAAYd,GAAZ,EAAiBC,MAAjB;AACD;;AAED,WAAKX,EAAL,CAAQS,IAAR,CAAagB,KAAb,CAAmB,KAAKzB,EAAxB,EAA4BoB,IAA5B;AACD,KAjCM,CAAP;AAkCD;;AAEKhB,SAAN,CAAcM,GAAd,EAAmBnB,OAAnB,EAA4B;AAAA;;AAAA;AAC1B,YAAMoB,SAASpB,WAAW,EAA1B;;AAEA,aAAO,uBAAY,UAACO,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAI,OAAKuB,OAAT,EAAkB;AAChBC,kBAAQC,GAAR,CAAYd,GAAZ,EAAiBC,MAAjB;AACD;;AAED;AACA,cAAMe,aAAN;AACA;;AAEA,eAAK1B,EAAL,CAAQ2B,GAAR,CAAYjB,GAAZ,EAAiBC,MAAjB,EAAyB,SAASiB,OAAT,CAAiB1B,GAAjB,EAAsB;AAC7C,cAAIA,GAAJ,EAAS;AACPwB,iBAAKG,MAAL,GAAc,IAAd;AACAH,iBAAKI,OAAL,GAAe,IAAf;;AAEA,gBAAIJ,KAAKJ,OAAT,EAAkB;AAChBC,sBAAQQ,KAAR,CAAc,OAAd,EAAuB7B,GAAvB;AACD;;AAED,mBAAOH,OAAOG,GAAP,CAAP;AACD;;AAEDwB,eAAKG,MAAL,GAAc,KAAKA,MAAnB;AACAH,eAAKI,OAAL,GAAe,KAAKA,OAApB;;AAEA,iBAAOhC,QAAQ,IAAR,CAAP;AACD,SAhBD;AAiBD,OA1BM,CAAP;AAH0B;AA8B3B;;AAEDkC,aAAWC,KAAX,EAAkBC,MAAlB,EAA0B;AACxB,QAAID,SAAS,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,YAAQC,OAAOC,IAAf;AACE,WAAK,UAAL;AACE,eAAOF,MAAMG,OAAN,EAAP;;AAEF;AACE,eAAO,MAAMJ,UAAN,CAAiBC,KAAjB,EAAwBC,MAAxB,CAAP;AALJ;AAOD;;AAEDG,eAAaJ,KAAb,EAAoBC,MAApB,EAA4B;AAC1B,QAAID,SAAS,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,YAAQC,OAAOC,IAAf;AACE,WAAK,UAAL;AACE,eAAO,IAAIG,IAAJ,CAAS,CAACL,KAAV,CAAP;;AAEF;AACE,eAAO,MAAMI,YAAN,CAAmBJ,KAAnB,EAA0BC,MAA1B,CAAP;AALJ;AAOD;AAnJ0C;kBAAxB9C,M","file":"sqlite.js","sourcesContent":["import Promise from 'bluebird';\nimport sqlite from 'sqlite3';\nimport Database from './database';\n\nexport default class SQLite extends Database {\n  get dialect() {\n    return 'sqlite';\n  }\n\n  async open() {\n    // https://phabricator.babeljs.io/T2765\n    const {file, mode} = this.options;\n\n    const defaultMode = sqlite.OPEN_READWRITE | sqlite.OPEN_CREATE;\n\n    const promise = new Promise((resolve, reject) => {\n      const db = new sqlite.Database(file, mode != null ? mode : defaultMode, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(db);\n        }\n      });\n    });\n\n    this.db = await promise;\n\n    if (this.options.wal) {\n      await this.execute('PRAGMA journal_mode=WAL');\n    }\n\n    if (this.options.autoVacuum) {\n      await this.execute('PRAGMA auto_vacuum=INCREMENTAL');\n    }\n\n    if (this.options.synchronous) {\n      await this.execute('PRAGMA synchronous=' + this.options.synchronous.toUpperCase());\n    }\n  }\n\n  async close() {\n    const promise = new Promise((resolve, reject) => {\n      this.db.close((err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n\n    await promise;\n\n    this.db = null;\n  }\n\n  each(sql, params, callback) {\n    return new Promise((resolve, reject) => {\n      let index = -1;\n      let columns = null;\n\n      const cb = (err, row) => {\n        if (err) {\n          return reject(err);\n        }\n\n        ++index;\n\n        if (columns == null) {\n          columns = Object.keys(row);\n        }\n\n        return callback(columns, row, index);\n      };\n\n      const complete = (err) => {\n        if (err) {\n          return reject(err);\n        }\n\n        return resolve(null);\n      };\n\n      const args = [ sql ].concat(params).concat(cb, complete);\n\n      if (this.verbose) {\n        console.log(sql, params);\n      }\n\n      this.db.each.apply(this.db, args);\n    });\n  }\n\n  async execute(sql, options) {\n    const params = options || [];\n\n    return new Promise((resolve, reject) => {\n      if (this.verbose) {\n        console.log(sql, params);\n      }\n\n      /* eslint-disable consistent-this */\n      const self = this;\n      /* eslint-enable consistent-this */\n\n      this.db.run(sql, params, function handler(err) {\n        if (err) {\n          self.lastID = null;\n          self.changes = null;\n\n          if (self.verbose) {\n            console.error('ERROR', err);\n          }\n\n          return reject(err);\n        }\n\n        self.lastID = this.lastID;\n        self.changes = this.changes;\n\n        return resolve(null);\n      });\n    });\n  }\n\n  toDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return value.getTime();\n\n      default:\n        return super.toDatabase(value, column);\n    }\n  }\n\n  fromDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return new Date(+value);\n\n      default:\n        return super.fromDatabase(value, column);\n    }\n  }\n}\n"]}