{"version":3,"sources":["../src/sqlite.js"],"names":[],"mappings":"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","file":"sqlite.js","sourcesContent":["import Promise from 'bluebird';\nimport sqlite from 'sqlite3';\nimport Database from './database';\n\nexport default class SQLite extends Database {\n  get dialect() {\n    return 'sqlite';\n  }\n\n  async open() {\n    // https://phabricator.babeljs.io/T2765\n    const {file, mode} = this.options;\n\n    const defaultMode = sqlite.OPEN_READWRITE | sqlite.OPEN_CREATE;\n\n    const promise = new Promise((resolve, reject) => {\n      const db = new sqlite.Database(file, mode != null ? mode : defaultMode, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(db);\n        }\n      });\n    });\n\n    this.db = await promise;\n\n    if (this.options.wal) {\n      await this.execute('PRAGMA journal_mode=WAL');\n    }\n\n    if (this.options.autoVacuum) {\n      await this.execute('PRAGMA auto_vacuum=INCREMENTAL');\n    }\n\n    if (this.options.synchronous) {\n      await this.execute('PRAGMA synchronous=' + this.options.synchronous.toUpperCase());\n    }\n  }\n\n  async close() {\n    const self = this;\n\n    const promise = new Promise((resolve, reject) => {\n      self.db.close((err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n\n    await promise;\n\n    this.db = null;\n  }\n\n  each(sql, params, callback) {\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      let index = -1;\n      let columns = null;\n\n      const cb = (err, row) => {\n        if (err) {\n          return reject(err);\n        }\n\n        ++index;\n\n        if (columns == null) {\n          columns = Object.keys(row);\n        }\n\n        return callback(columns, row, index);\n      };\n\n      const complete = (err) => {\n        if (err) {\n          return reject(err);\n        } else {\n          return resolve(null);\n        }\n      };\n\n      let args = [sql].concat(params).concat(cb, complete);\n\n      if (self.verbose) {\n        console.log(sql, params);\n      }\n\n      self.db.each.apply(self.db, args);\n    });\n  }\n\n  async execute(sql, params) {\n    params = params || [];\n\n    return new Promise((resolve, reject) => {\n      if (this.verbose) {\n        console.log(sql, params);\n      }\n\n      const self = this;\n\n      this.db.run(sql, params, function(err) {\n        if (err) {\n          self.lastID = null;\n          self.changes = null;\n\n          if (self.verbose) {\n            console.error('ERROR', err);\n          }\n\n          return reject(err);\n        } else {\n          self.lastID = this.lastID;\n          self.changes = this.changes;\n\n          return resolve(null);\n        }\n      });\n    });\n  }\n\n  toDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return value.getTime();\n\n      default:\n        return super.toDatabase(value, column);\n    }\n  }\n\n  fromDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return new Date(+value);\n\n      default:\n        return super.fromDatabase(value, column);\n    }\n  }\n}\n"]}