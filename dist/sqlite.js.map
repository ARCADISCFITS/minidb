{"version":3,"sources":["../src/sqlite.js"],"names":["quoteLiteral","value","stringValue","Date","getTime","toString","Number","isFinite","JSON","stringify","result","indexOf","length","i","char","SQLite","open","file","flags","Promise","resolve","reject","database","err","db","lastError","setup","options","wal","execute","autoVacuum","synchronous","toUpperCase","ident","dialect","_each","sql","params","callback","log","cursor","query","hasRows","next","columns","values","index","ex","verbose","console","error","_lastInsertID","lastInsertID","close","_execute","resultColumns","rows","push","transaction","block","beginTransaction","commit","rollback","rollbackError","arrayFormatString","array","isInteger","buildWhere","where","clause","key","Object","keys","columnName","Array","isArray","buildInsert","attributes","includeNames","names","placeholders","raw","buildUpdate","sets","insertStatement","table","returning","join","insertStatements","arrayOfAttributes","arrayOfValues","insert","statement","all","toDatabase","column","type","fromDatabase"],"mappings":"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","file":"sqlite.js","sourcesContent":["import pgformat from 'pg-format';\nimport { format } from 'util';\nimport esc from './esc';\nimport Database from './database';\nimport DatabaseCursor from './database-cursor';\nimport { Database as SQLiteDatabase } from 'minisqlite';\n\nfunction quoteLiteral(value) {\n  let stringValue = null;\n\n  if (value == null) {\n    return 'NULL';\n  } else if (value === false) {\n    return '0';\n  } else if (value === true) {\n    return '1';\n  } else if (value instanceof Date) {\n    return value.getTime().toString();\n  } else if (typeof value === 'number') {\n    return Number.isFinite(value) ? value.toString() : 'NULL';\n  } else if (typeof value === 'string') {\n    stringValue = value;\n  } else {\n    stringValue = JSON.stringify(value);\n  }\n\n  let result = \"'\";\n\n  if (stringValue.indexOf(\"'\") !== -1) {\n    const length = stringValue.length;\n\n    for (let i = 0; i < length; i++) {\n      const char = stringValue[i];\n\n      if (char === \"'\") {\n        result += \"'\";\n      }\n\n      result += char;\n    }\n  } else {\n    result += stringValue;\n  }\n\n  result += \"'\";\n\n  return result;\n}\n\nexport default class SQLite extends Database {\n  async open({file, flags}) {\n    return new Promise((resolve, reject) => {\n      const database = new SQLiteDatabase();\n\n      database.open(file, flags, null, (err, db) => {\n        if (err) {\n          return reject(db ? db.lastError : err);\n        }\n\n        return resolve(db);\n      });\n    });\n  }\n\n  async setup() {\n    if (!this.database) {\n      this.database = await this.open(this.options);\n    }\n\n    if (this.options.wal) {\n      await this.execute('PRAGMA journal_mode=WAL');\n    }\n\n    if (this.options.autoVacuum) {\n      await this.execute('PRAGMA auto_vacuum=INCREMENTAL');\n    }\n\n    if (this.options.synchronous) {\n      await this.execute('PRAGMA synchronous=' + this.options.synchronous.toUpperCase());\n    }\n  }\n\n  ident(value) {\n    return esc(value, '\"');\n  }\n\n  static async open(options) {\n    const db = new SQLite(options);\n    await db.setup();\n    return db;\n  }\n\n  get dialect() {\n    return 'sqlite';\n  }\n\n  async _each(sql, params, callback) {\n    this.log(sql);\n\n    const database = this.database;\n    let cursor = null;\n\n    try {\n      cursor = this.query(sql);\n\n      while (cursor.hasRows) {\n        const result = await cursor.next();\n\n        if (result && callback) {\n          /* eslint-disable callback-return */\n          await callback({columns: result.columns, values: result.values, index: result.index, cursor});\n          /* eslint-enable callback-return */\n        }\n      }\n    } catch (ex) {\n      if (this.verbose) {\n        console.error('ERROR', ex);\n      }\n\n      throw ex;\n    } finally {\n      this._lastInsertID = database.lastInsertID;\n\n      if (cursor) {\n        try {\n          await cursor.close();\n        } catch (err) {\n          // Closing the cursor on a connection where there was a previous error rethrows the same error\n          // This is because pumping the cursor to completion ends up carrying the original error to\n          // the end. This is desired behavior, we just have to swallow any potential errors here.\n        }\n      }\n    }\n  }\n\n  async close() {\n    if (this.database) {\n      await this.database.close();\n      this.database = null;\n    }\n  }\n\n  async _execute(sql, params) {\n    let resultColumns = null;\n    const rows = [];\n\n    await this._each(sql, [], async ({columns, values, index}) => {\n      if (resultColumns == null) {\n        resultColumns = columns;\n      }\n\n      if (values) {\n        rows.push(values);\n      }\n    });\n\n    return { rows: rows, columns: resultColumns };\n  }\n\n  query(...args) {\n    return new DatabaseCursor(this, this.database.query(...args));\n  }\n\n  async transaction(block) {\n    await this.beginTransaction();\n\n    try {\n      await block(this);\n      await this.commit();\n    } catch (ex) {\n      try {\n        await this.rollback();\n      } catch (rollbackError) {\n        // await this.close();\n        throw rollbackError;\n      }\n\n      throw ex;\n    } finally {\n      // await this.close();\n    }\n  }\n\n  arrayFormatString(array) {\n    if (Number.isInteger(array[0])) {\n      return 'ARRAY[%L]::bigint[]';\n    } else if (typeof array[0] === 'number') {\n      return 'ARRAY[%L]::double precision[]';\n    }\n\n    return 'ARRAY[%L]';\n  }\n\n  buildWhere(where) {\n    const clause = [];\n\n    if (where) {\n      for (const key of Object.keys(where)) {\n        const value = where[key];\n        const columnName = '`' + key + '`';\n\n        if (value == null) {\n          clause.push(pgformat('%s IS NULL', columnName));\n        } else if (Array.isArray(value)) {\n          clause.push(pgformat('%s = ANY (' + this.arrayFormatString(where[key]) + ')', columnName, value));\n        } else {\n          clause.push(pgformat('%s = %s', columnName, quoteLiteral(where[key])));\n        }\n      }\n    }\n\n    return [ clause, [] ];\n  }\n\n  buildInsert(attributes, includeNames = true) {\n    const names = [];\n    const values = [];\n    const placeholders = [];\n\n    // Use the literal values instead of placeholders  because parameterized\n    // queries require prepared statements. Prepared statements are stateful\n    // and impose requirements on the connection that are incompatible with\n    // pgbouncer.\n    for (const key of Object.keys(attributes)) {\n      if (includeNames) {\n        names.push('`' + key + '`');\n      }\n\n      const value = attributes[key];\n\n      if (value && value.raw) {\n        placeholders.push(pgformat('%s', value.raw));\n      } else {\n        placeholders.push(quoteLiteral(value));\n      }\n    }\n\n    return [ names, placeholders, values ];\n  }\n\n  buildUpdate(attributes) {\n    const sets = [];\n    const values = [];\n\n    for (const key of Object.keys(attributes)) {\n      const value = attributes[key];\n\n      if (value && value.raw) {\n        sets.push(pgformat('%s = %s', '`' + key + '`', value.raw));\n      } else {\n        sets.push(pgformat('%s = %s', '`' + key + '`', quoteLiteral(value)));\n      }\n    }\n\n    return [ sets, values ];\n  }\n\n  insertStatement(table, attributes, options) {\n    // if (options == null) {\n    //   throw new Error('options not given');\n    // }\n\n    const [ names, placeholders, values ] = this.buildInsert(attributes);\n\n    const returning = '';\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES (%s)%s;',\n                       table,\n                       names.join(', '),\n                       placeholders.join(', '),\n                       returning);\n\n    return {sql, values};\n  }\n\n  insertStatements(table, arrayOfAttributes, options) {\n    const arrayOfValues = [];\n\n    let names = null;\n\n    for (const attributes of arrayOfAttributes) {\n      const insert = this.buildInsert(attributes, names == null);\n\n      if (names == null) {\n        names = insert[0];\n      }\n\n      arrayOfValues.push('(' + insert[1].join(', ') + ')');\n    }\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES %s;',\n                       table,\n                       names.join(', '),\n                       arrayOfValues.join(',\\n'));\n\n    return {sql, values: {}};\n  }\n\n  async insert(table, attributes, options) {\n    const statement = this.insertStatement(table, attributes, options);\n\n    const result = await this.all(statement.sql, statement.values);\n\n    // TODO(zhm) broken\n    return this._lastInsertID;\n    // return +result[0].id;\n  }\n\n  toDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return value.getTime();\n\n      default:\n        return super.toDatabase(value, column);\n    }\n  }\n\n  fromDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return new Date(+value);\n\n      default:\n        return super.fromDatabase(value, column);\n    }\n  }\n}\n\n"]}