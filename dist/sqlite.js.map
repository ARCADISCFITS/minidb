{"version":3,"sources":["../src/sqlite.js"],"names":["quoteLiteral","value","stringValue","Date","getTime","toString","JSON","stringify","result","indexOf","length","i","char","SQLite","createClient","file","Promise","resolve","reject","connect","err","client","lastError","setup","options","wal","execute","autoVacuum","synchronous","toUpperCase","ident","open","db","dialect","_each","sql","params","callback","log","close","cursor","query","hasRows","next","columns","values","index","ex","verbose","console","error","_lastInsertID","lastInsertID","_execute","resultColumns","rows","push","transaction","block","beginTransaction","commit","rollback","rollbackError","arrayFormatString","array","Number","isInteger","buildWhere","where","clause","key","Object","keys","Array","isArray","buildInsert","attributes","includeNames","names","placeholders","raw","buildUpdate","sets","insertStatement","table","returning","join","insertStatements","arrayOfAttributes","arrayOfValues","insert","statement","all","toDatabase","column","type","toISOString","fromDatabase"],"mappings":"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","file":"sqlite.js","sourcesContent":["import pgformat from 'pg-format';\nimport { format } from 'util';\nimport esc from './esc';\nimport Database from './database';\nimport DatabaseCursor from './database-cursor';\nimport { Client } from 'minisqlite';\n\nfunction quoteLiteral(value) {\n  let stringValue = null;\n\n  if (value == null) {\n    return 'NULL';\n  } else if (value === false) {\n    return '0';\n  } else if (value === true) {\n    return '1';\n  } else if (value instanceof Date) {\n    return value.getTime().toString();\n  } else if (typeof value === 'number') {\n    return value.toString();\n  } else if (typeof value === 'string') {\n    stringValue = value;\n  } else {\n    stringValue = JSON.stringify(value);\n  }\n\n  let result = \"'\";\n\n  if (stringValue.indexOf(\"'\") !== -1) {\n    const length = stringValue.length;\n\n    for (let i = 0; i < length; i++) {\n      const char = stringValue[i];\n\n      if (char === \"'\") {\n        result += \"'\";\n      }\n\n      result += char;\n    }\n  } else {\n    result += stringValue;\n  }\n\n  result += \"'\";\n\n  return result;\n}\n\nexport default class SQLite extends Database {\n  async createClient({file}) {\n    return new Promise((resolve, reject) => {\n      new Client().connect(file, null, null, (err, client) => {\n        if (err) {\n          return reject(client ? client.lastError : err);\n        }\n\n        return resolve(client);\n      });\n    });\n  }\n\n  async setup() {\n    if (!this.client) {\n      this.client = await this.createClient(this.options);\n    }\n\n    if (this.options.wal) {\n      await this.execute('PRAGMA journal_mode=WAL');\n    }\n\n    if (this.options.autoVacuum) {\n      await this.execute('PRAGMA auto_vacuum=INCREMENTAL');\n    }\n\n    if (this.options.synchronous) {\n      await this.execute('PRAGMA synchronous=' + this.options.synchronous.toUpperCase());\n    }\n  }\n\n  ident(value) {\n    return esc(value, '\"');\n  }\n\n  static async open(options) {\n    const db = new SQLite(options);\n    await db.setup();\n    return db;\n  }\n\n  get dialect() {\n    return 'sqlite';\n  }\n\n  async _each(sql, params, callback) {\n    this.log(sql);\n\n    const close = false;\n    const client = this.client;\n    let cursor = null;\n\n    try {\n      cursor = this.query(sql);\n\n      while (cursor.hasRows) {\n        const result = await cursor.next();\n\n        if (result && callback) {\n          /* eslint-disable callback-return */\n          await callback({columns: result.columns, values: result.values, index: result.index, cursor});\n          /* eslint-enable callback-return */\n        }\n      }\n    } catch (ex) {\n      if (this.verbose) {\n        console.error('ERROR', ex);\n      }\n\n      throw ex;\n    } finally {\n      this._lastInsertID = client.lastInsertID;\n\n      if (cursor) {\n        try {\n          await cursor.close();\n        } catch (err) {\n          // Closing the cursor on a connection where there was a previous error rethrows the same error\n          // This is because pumping the cursor to completion ends up carrying the original error to\n          // the end. This is desired behavior, we just have to swallow any potential errors here.\n        }\n      }\n\n      if (close) {\n        await client.close();\n      }\n    }\n  }\n\n  async close() {\n    if (this.client) {\n      await this.client.close();\n\n      this.client = null;\n    }\n  }\n\n  async _execute(sql, params) {\n    let resultColumns = null;\n    const rows = [];\n\n    await this._each(sql, [], async ({columns, values, index}) => {\n      if (resultColumns == null) {\n        resultColumns = columns;\n      }\n\n      if (values) {\n        rows.push(values);\n      }\n    });\n\n    return { rows: rows, columns: resultColumns };\n  }\n\n  query(...args) {\n    return new DatabaseCursor(this, this.client.query(...args));\n  }\n\n  async transaction(block) {\n    await this.beginTransaction();\n\n    try {\n      await block(this);\n      await this.commit();\n    } catch (ex) {\n      try {\n        await this.rollback();\n      } catch (rollbackError) {\n        await this.close();\n        throw rollbackError;\n      }\n\n      throw ex;\n    } finally {\n      await this.close();\n    }\n  }\n\n  arrayFormatString(array) {\n    if (Number.isInteger(array[0])) {\n      return 'ARRAY[%L]::bigint[]';\n    } else if (typeof array[0] === 'number') {\n      return 'ARRAY[%L]::double precision[]';\n    }\n\n    return 'ARRAY[%L]';\n  }\n\n  buildWhere(where) {\n    const clause = [];\n\n    if (where) {\n      for (const key of Object.keys(where)) {\n        if (Array.isArray(where[key])) {\n          clause.push(pgformat('%I = ANY (' + this.arrayFormatString(where[key]) + ')', key, where[key]));\n        } else {\n          clause.push(pgformat('%I = %s', key, quoteLiteral(where[key])));\n        }\n      }\n    }\n\n    return [ clause, [] ];\n  }\n\n  buildInsert(attributes, includeNames = true) {\n    const names = [];\n    const values = [];\n    const placeholders = [];\n\n    // Use the literal values instead of placeholders  because parameterized\n    // queries require prepared statements. Prepared statements are stateful\n    // and impose requirements on the connection that are incompatible with\n    // pgbouncer.\n    for (const key of Object.keys(attributes)) {\n      if (includeNames) {\n        names.push(pgformat('%I', key));\n      }\n\n      const value = attributes[key];\n\n      if (value && value.raw) {\n        placeholders.push(pgformat('%s', value.raw));\n      } else {\n        placeholders.push(quoteLiteral(value));\n      }\n    }\n\n    return [ names, placeholders, values ];\n  }\n\n  buildUpdate(attributes) {\n    const sets = [];\n    const values = [];\n\n    for (const key of Object.keys(attributes)) {\n      const value = attributes[key];\n\n      if (value && value.raw) {\n        sets.push(pgformat('%I = %s', key, value.raw));\n      } else {\n        sets.push(pgformat('%I = %s', key, quoteLiteral(value)));\n      }\n    }\n\n    return [ sets, values ];\n  }\n\n  insertStatement(table, attributes, options) {\n    // if (options == null) {\n    //   throw new Error('options not given');\n    // }\n\n    const [ names, placeholders, values ] = this.buildInsert(attributes);\n\n    const returning = '';\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES (%s)%s;',\n                       table,\n                       names.join(', '),\n                       placeholders.join(', '),\n                       returning);\n\n    return {sql, values};\n  }\n\n  insertStatements(table, arrayOfAttributes, options) {\n    const arrayOfValues = [];\n\n    let names = null;\n\n    for (const attributes of arrayOfAttributes) {\n      const insert = this.buildInsert(attributes, names == null);\n\n      if (names == null) {\n        names = insert[0];\n      }\n\n      arrayOfValues.push('(' + insert[1].join(', ') + ')');\n    }\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES %s;',\n                       table,\n                       names.join(', '),\n                       arrayOfValues.join(',\\n'));\n\n    return {sql, values: {}};\n  }\n\n  async insert(table, attributes, options) {\n    const statement = this.insertStatement(table, attributes, options);\n\n    const result = await this.all(statement.sql, statement.values);\n\n    // TODO(zhm) broken\n    return this._lastInsertID;\n    // return +result[0].id;\n  }\n\n  toDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return value.toISOString();\n\n      default:\n        return super.toDatabase(value, column);\n    }\n  }\n\n  fromDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return new Date(value);\n\n      default:\n        return super.fromDatabase(value, column);\n    }\n  }\n}\n\n"]}