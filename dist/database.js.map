{"version":3,"sources":["../src/database.js"],"names":["shortEnglishHumanizer","humanizer","language","languages","shortEn","ms","Database","constructor","options","setTypeConverter","type","converter","TYPE_CONVERTERS","verbose","log","message","measure","text","block","debug","start","Date","getTime","result","error","ex","total","console","spacer","units","ident","value","literal","open","close","each","sql","params","callback","_each","execute","_execute","beginTransaction","commit","rollback","transaction","all","rows","columns","values","index","cursor","push","get","length","buildWhere","where","clause","key","Object","keys","buildInsert","attributes","names","placeholders","Array","isArray","join","buildUpdate","sets","name","findEachByAttributes","statement","findStatement","tableName","orderBy","limit","offset","findAllByAttributes","findFirstByAttributes","trace","profile","time","selection","parts","insertStatement","table","updateStatement","updateValues","apply","raw","whereValues","whereClause","deleteStatement","insert","lastID","update","delete","toDatabase","column","toString","JSON","stringify","fromDatabase","parse"],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;;;;;AAEA,MAAMA,wBAAwB,2BAAiBC,SAAjB,CAA2B;AACvDC,YAAU,SAD6C;AAEvDC,aAAW;AACTC,aAAS;AACPC,UAAI,MAAM;AADH;AADA;AAF4C,CAA3B,CAA9B;;AASe,MAAMC,QAAN,CAAe;;AAG5BC,cAAYC,OAAZ,EAAqB;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAED,SAAOC,gBAAP,CAAwBC,IAAxB,EAA8BC,SAA9B,EAAyC;AACvC,QAAIA,SAAJ,EAAe;AACbL,eAASM,eAAT,CAAyBF,IAAzB,IAAiCC,SAAjC;AACD,KAFD,MAEO,IAAID,IAAJ,EAAU;AACf,aAAOJ,SAASM,eAAT,CAAyBF,IAAzB,CAAP;AACD;AACF;;AAED,MAAIG,OAAJ,GAAc;AACZ,WAAO,KAAP;AACA;AACD;;AAEDC,MAAIC,OAAJ,EAAa;AACX;AACA;AACA;AACD;;AAED,SAAaC,OAAb,CAAqBC,IAArB,EAA2BC,KAA3B,EAAkC;AAAA;AAChC,UAAI,CAACZ,SAASa,KAAd,EAAqB;AACnB,eAAO,MAAMD,OAAb;AACD;;AAED,YAAME,QAAQ,IAAIC,IAAJ,GAAWC,OAAX,EAAd;;AAEA,UAAIC,SAAS,IAAb;AACA,UAAIC,QAAQ,IAAZ;;AAEA,UAAI;AACFD,iBAAS,MAAML,OAAf;AACD,OAFD,CAEE,OAAOO,EAAP,EAAW;AACXD,gBAAQC,EAAR;AACD;;AAED,YAAMC,QAAS,IAAIL,IAAJ,GAAWC,OAAX,EAAD,GAAyBF,KAAvC;;AAEAO,cAAQb,GAAR,CAAY,WAAWd,sBAAsB0B,KAAtB,EAA6B,EAACE,QAAQ,EAAT,EAAaC,OAAO,CAAE,IAAF,CAApB,EAA7B,CAAX,GAAyE,GAAzE,IAAgFL,QAAQ,UAAR,GAAqB,GAArG,IAA4GP,IAAxH;;AAEA,UAAIO,KAAJ,EAAW;AACT,cAAMA,KAAN;AACD;;AAED,aAAOD,MAAP;AAxBgC;AAyBjC;;AAEDO,QAAMC,KAAN,EAAa;AACX,WAAO,mBAAIA,KAAJ,EAAW,GAAX,CAAP;AACD;;AAEDC,UAAQD,KAAR,EAAe;AACb,WAAO,mBAAIA,KAAJ,EAAW,GAAX,CAAP;AACD;;AAEKE,MAAN,GAAa;AAAA;AACX,aAAO,IAAP;AADW;AAEZ;;AAEKC,OAAN,GAAc;AAAA;AACZ,aAAO,IAAP;AADY;AAEb;;AAEKC,MAAN,CAAWC,GAAX,EAAgBC,MAAhB,EAAwBC,QAAxB,EAAkC;AAAA;;AAAA;AAChC,aAAO,MAAMhC,SAASU,OAAT,CAAiBoB,GAAjB,oBAAsB,aAAY;AAC7C,eAAO,MAAM,MAAKG,KAAL,CAAWH,GAAX,EAAgBC,MAAhB,EAAwBC,QAAxB,CAAb;AACD,OAFY,EAAb;AADgC;AAIjC;;AAEKE,SAAN,CAAcJ,GAAd,EAAmBC,MAAnB,EAA2B;AAAA;;AAAA;AACzB,aAAO,MAAM/B,SAASU,OAAT,CAAiBoB,GAAjB,oBAAsB,aAAY;AAC7C,eAAO,MAAM,OAAKK,QAAL,CAAcL,GAAd,EAAmBC,MAAnB,CAAb;AACD,OAFY,EAAb;AADyB;AAI1B;;AAEDK,qBAAmB;AACjB,WAAO,KAAKF,OAAL,CAAa,oBAAb,CAAP;AACD;;AAEDG,WAAS;AACP,WAAO,KAAKH,OAAL,CAAa,qBAAb,CAAP;AACD;;AAEDI,aAAW;AACT,WAAO,KAAKJ,OAAL,CAAa,uBAAb,CAAP;AACD;;AAEKK,aAAN,CAAkB3B,KAAlB,EAAyB;AAAA;;AAAA;AACvB,YAAM,OAAKwB,gBAAL,EAAN;;AAEA,UAAI;AACF,cAAMxB,aAAN;AACA,cAAM,OAAKyB,MAAL,EAAN;AACD,OAHD,CAGE,OAAOlB,EAAP,EAAW;AACXE,gBAAQb,GAAR,CAAY,sBAAZ,EAAoCW,EAApC;AACA,cAAM,OAAKmB,QAAL,EAAN;AACA,cAAMnB,EAAN;AACD;AAVsB;AAWxB;;AAEKqB,KAAN,CAAUV,GAAV,EAAeC,MAAf,EAAuB;AAAA;;AAAA;AACrB,YAAMU,OAAO,EAAb;;AAEA,YAAM,OAAKZ,IAAL,CAAUC,GAAV,EAAeC,MAAf,EAAuB,iBAAsC;AAAA,YAApCW,OAAoC,SAApCA,OAAoC;AAAA,YAA3BC,MAA2B,SAA3BA,MAA2B;AAAA,YAAnBC,KAAmB,SAAnBA,KAAmB;AAAA,YAAZC,MAAY,SAAZA,MAAY;;AACjE,YAAIF,MAAJ,EAAY;AACVF,eAAKK,IAAL,CAAUH,MAAV;AACD;AACF,OAJK,CAAN;;AAMA,aAAOF,IAAP;AATqB;AAUtB;;AAEKM,KAAN,CAAUjB,GAAV,EAAeC,MAAf,EAAuB;AAAA;;AAAA;AACrB,YAAMU,OAAO,EAAb;;AAEA,YAAM,OAAKZ,IAAL,CAAUC,GAAV,EAAeC,MAAf,EAAuB,iBAAsC;AAAA,YAApCW,OAAoC,SAApCA,OAAoC;AAAA,YAA3BC,MAA2B,SAA3BA,MAA2B;AAAA,YAAnBC,KAAmB,SAAnBA,KAAmB;AAAA,YAAZC,MAAY,SAAZA,MAAY;;AACjE,YAAIF,MAAJ,EAAY;AACVF,eAAKK,IAAL,CAAUH,MAAV;AACD;AACF,OAJK,CAAN;;AAMA,aAAQF,KAAKO,MAAL,GAAcP,KAAK,CAAL,CAAd,GAAwB,IAAhC;AATqB;AAUtB;;AAEDQ,aAAWC,KAAX,EAAkB;AAChB,UAAMC,SAAS,EAAf;AACA,UAAMR,SAAS,EAAf;;AAEA,QAAIO,KAAJ,EAAW;AACT,WAAK,MAAME,GAAX,IAAkBC,OAAOC,IAAP,CAAYJ,KAAZ,CAAlB,EAAsC;AACpC,cAAMzB,QAAQyB,MAAME,GAAN,CAAd;;AAEA,YAAI3B,SAAS,IAAb,EAAmB;AACjB0B,iBAAOL,IAAP,CAAY,KAAKtB,KAAL,CAAW4B,GAAX,IAAkB,MAA9B;AACAT,iBAAOG,IAAP,CAAYrB,KAAZ;AACD,SAHD,MAGO;AACL0B,iBAAOL,IAAP,CAAY,KAAKtB,KAAL,CAAW4B,GAAX,IAAkB,UAA9B;AACD;AACF;AACF;;AAED,WAAO,CAAED,MAAF,EAAUR,MAAV,CAAP;AACD;;AAEDY,cAAYC,UAAZ,EAAwB;AACtB,UAAMC,QAAQ,EAAd;AACA,UAAMd,SAAS,EAAf;AACA,UAAMe,eAAe,EAArB;;AAEA,SAAK,MAAMN,GAAX,IAAkBC,OAAOC,IAAP,CAAYE,UAAZ,CAAlB,EAA2C;AACzCC,YAAMX,IAAN,CAAW,KAAKtB,KAAL,CAAW4B,GAAX,CAAX;AACAM,mBAAaZ,IAAb,CAAkB,GAAlB;;AAEA,YAAMrB,QAAQ+B,WAAWJ,GAAX,CAAd;;AAEA,UAAIO,MAAMC,OAAN,CAAcnC,KAAd,CAAJ,EAA0B;AACxBkB,eAAOG,IAAP,CAAY,OAAOrB,MAAMoC,IAAN,CAAW,IAAX,CAAP,GAA0B,IAAtC;AACD,OAFD,MAEO;AACLlB,eAAOG,IAAP,CAAYrB,KAAZ;AACD;AACF;;AAED,WAAO,CAAEgC,KAAF,EAASC,YAAT,EAAuBf,MAAvB,CAAP;AACD;;AAEDmB,cAAYN,UAAZ,EAAwB;AACtB,UAAMO,OAAO,EAAb;AACA,UAAMpB,SAAS,EAAf;;AAEA,SAAK,MAAMqB,IAAX,IAAmBX,OAAOC,IAAP,CAAYE,UAAZ,CAAnB,EAA4C;AAC1CO,WAAKjB,IAAL,CAAU,KAAKtB,KAAL,CAAWwC,IAAX,IAAmB,MAA7B;;AAEA,YAAMvC,QAAQ+B,WAAWQ,IAAX,CAAd;;AAEA,UAAIL,MAAMC,OAAN,CAAcnC,KAAd,CAAJ,EAA0B;AACxBkB,eAAOG,IAAP,CAAY,OAAOrB,MAAMoC,IAAN,CAAW,IAAX,CAAP,GAA0B,IAAtC;AACD,OAFD,MAEO;AACLlB,eAAOG,IAAP,CAAYrB,KAAZ;AACD;AACF;;AAED,WAAO,CAAEsC,IAAF,EAAQpB,MAAR,CAAP;AACD;;AAEDsB,uBAAqB/D,OAArB,EAA8B8B,QAA9B,EAAwC;AACtC,UAAMkC,YAAY,KAAKC,aAAL,CAAmBjE,QAAQkE,SAA3B,EACmBlE,QAAQwC,OAD3B,EAEmBxC,QAAQgD,KAF3B,EAGmBhD,QAAQmE,OAH3B,EAImBnE,QAAQoE,KAJ3B,EAKmBpE,QAAQqE,MAL3B,CAAlB;;AAOA,WAAO,KAAK1C,IAAL,CAAUqC,UAAUpC,GAApB,EAAyBoC,UAAUvB,MAAnC,EAA2CX,QAA3C,CAAP;AACD;;AAEDwC,sBAAoBJ,SAApB,EAA+B1B,OAA/B,EAAwCQ,KAAxC,EAA+CmB,OAA/C,EAAwDC,KAAxD,EAA+DC,MAA/D,EAAuE;AACrE,UAAML,YAAY,KAAKC,aAAL,CAAmBC,SAAnB,EAA8B1B,OAA9B,EAAuCQ,KAAvC,EAA8CmB,OAA9C,EAAuDC,KAAvD,EAA8DC,MAA9D,CAAlB;;AAEA,WAAO,KAAK/B,GAAL,CAAS0B,UAAUpC,GAAnB,EAAwBoC,UAAUvB,MAAlC,CAAP;AACD;;AAEK8B,uBAAN,CAA4BL,SAA5B,EAAuC1B,OAAvC,EAAgDc,UAAhD,EAA4Da,OAA5D,EAAqE;AAAA;;AAAA;AACnE,YAAM5B,OAAO,MAAM,OAAK+B,mBAAL,CAAyBJ,SAAzB,EAAoC1B,OAApC,EAA6Cc,UAA7C,EAAyDa,OAAzD,EAAkE,CAAlE,CAAnB;;AAEA,aAAO5B,QAAQ,IAAR,GAAeA,KAAK,CAAL,CAAf,GAAyB,IAAhC;AAHmE;AAIpE;;AAEDiC,UAAQ;AACN,WAAO,IAAP;AACD;;AAEDC,UAAQ7C,GAAR,EAAa8C,IAAb,EAAmB;AACjBvD,YAAQb,GAAR,CAAY,SAAZ,EAAuB,MAAMoE,IAAN,GAAa,KAApC,EAA2C9C,GAA3C;AACD;;AAEDqC,gBAAcC,SAAd,EAAyB1B,OAAzB,EAAkCQ,KAAlC,EAAyCmB,OAAzC,EAAkDC,KAAlD,EAAyDC,MAAzD,EAAiE;AAC/D,UAAMM,YAAanC,WAAW,IAAX,GAAkB,CAAE,GAAF,CAAlB,GAA4BA,OAA/C;;AAD+D,sBAGpC,KAAKO,UAAL,CAAgBC,KAAhB,CAHoC;AAAA;;AAAA,UAGvDC,MAHuD;AAAA,UAG/CR,MAH+C;;;AAK/D,UAAMmC,QAAQ,EAAd;;AAEA,QAAI3B,OAAOH,MAAP,GAAgB,CAApB,EAAuB;AACrB8B,YAAMhC,IAAN,CAAW,kBAAO,WAAP,EAAoBK,OAAOU,IAAP,CAAY,OAAZ,CAApB,CAAX;AACD;;AAED,QAAIQ,WAAW,IAAf,EAAqB;AACnBS,YAAMhC,IAAN,CAAW,kBAAO,cAAP,EAAuBuB,OAAvB,CAAX;AACD;;AAED,QAAIC,SAAS,IAAb,EAAmB;AACjBQ,YAAMhC,IAAN,CAAW,kBAAO,WAAP,EAAoB,KAAKpB,OAAL,CAAa4C,KAAb,CAApB,CAAX;AACD;;AAED,QAAIC,UAAU,IAAd,EAAoB;AAClBO,YAAMhC,IAAN,CAAW,kBAAO,YAAP,EAAqB,KAAKpB,OAAL,CAAa6C,MAAb,CAArB,CAAX;AACD;;AAED,UAAMzC,MAAM,kBAAO,qBAAP,EACO+C,UAAUhB,IAAV,CAAe,IAAf,CADP,EAEO,KAAKrC,KAAL,CAAW4C,SAAX,CAFP,EAGOU,MAAMjB,IAAN,CAAW,EAAX,CAHP,CAAZ;;AAKA,WAAO,EAAC/B,QAAD,EAAMa,cAAN,EAAP;AACD;;AAEDoC,kBAAgBC,KAAhB,EAAuBxB,UAAvB,EAAmC;AAAA,uBACO,KAAKD,WAAL,CAAiBC,UAAjB,CADP;AAAA;;AAAA,UACzBC,KADyB;AAAA,UAClBC,YADkB;AAAA,UACJf,MADI;;;AAGjC,UAAMb,MAAM,kBAAO,mCAAP,EACOkD,KADP,EAEOvB,MAAMI,IAAN,CAAW,IAAX,CAFP,EAGOH,aAAaG,IAAb,CAAkB,IAAlB,CAHP,CAAZ;;AAKA,WAAO,EAAC/B,QAAD,EAAMa,cAAN,EAAP;AACD;;AAEDsC,kBAAgBD,KAAhB,EAAuB9B,KAAvB,EAA8BM,UAA9B,EAA0CtD,OAA1C,EAAmD;AACjD,UAAMyC,SAAS,EAAf;;AADiD,uBAGlB,KAAKmB,WAAL,CAAiBN,UAAjB,CAHkB;AAAA;;AAAA,UAGzCO,IAHyC;AAAA,UAGnCmB,YAHmC;;;AAKjDvC,WAAOG,IAAP,CAAYqC,KAAZ,CAAkBxC,MAAlB,EAA0BuC,YAA1B;;AAEA,QAAIhF,WAAWA,QAAQkF,GAAvB,EAA4B;AAC1B,WAAK,MAAMpB,IAAX,IAAmBX,OAAOC,IAAP,CAAYpD,QAAQkF,GAApB,CAAnB,EAA6C;AAC3CrB,aAAKjB,IAAL,CAAU,kBAAO,SAAP,EAAkBkB,IAAlB,EAAwB9D,QAAQkF,GAAR,CAAYpB,IAAZ,CAAxB,CAAV;AACD;AACF;;AAXgD,uBAajB,KAAKf,UAAL,CAAgBC,KAAhB,CAbiB;AAAA;;AAAA,UAazCC,MAbyC;AAAA,UAajCkC,WAbiC;;;AAejD1C,WAAOG,IAAP,CAAYqC,KAAZ,CAAkBxC,MAAlB,EAA0B0C,WAA1B;;AAEA,UAAMC,cAAcnC,OAAOH,MAAP,GAAgB,YAAYG,OAAOU,IAAP,CAAY,OAAZ,CAA5B,GAAmD,EAAvE;;AAEA,UAAM/B,MAAM,kBAAO,qBAAP,EACOkD,KADP,EACcjB,KAAKF,IAAL,CAAU,IAAV,CADd,EAC+ByB,WAD/B,CAAZ;;AAGA,WAAO,EAACxD,QAAD,EAAMa,cAAN,EAAP;AACD;;AAED4C,kBAAgBP,KAAhB,EAAuB9B,KAAvB,EAA8B;AAAA,uBACD,KAAKD,UAAL,CAAgBC,KAAhB,CADC;AAAA;;AAAA,UACpBC,MADoB;AAAA,UACZR,MADY;;;AAG5B,UAAM2C,cAAcnC,OAAOH,MAAP,GAAgB,YAAYG,OAAOU,IAAP,CAAY,OAAZ,CAA5B,GAAmD,EAAvE;;AAEA,UAAM/B,MAAM,kBAAO,mBAAP,EACOkD,KADP,EACcM,WADd,CAAZ;;AAGA,WAAO,EAACxD,QAAD,EAAMa,cAAN,EAAP;AACD;;AAEK6C,QAAN,CAAaR,KAAb,EAAoBxB,UAApB,EAAgCtD,OAAhC,EAAyC;AAAA;;AAAA;AACvC,YAAMgE,YAAY,OAAKa,eAAL,CAAqBC,KAArB,EAA4BxB,UAA5B,CAAlB;;AAEA,YAAM,OAAKtB,OAAL,CAAagC,UAAUpC,GAAvB,EAA4BoC,UAAUvB,MAAtC,CAAN;;AAEA,aAAO,OAAK8C,MAAZ;AALuC;AAMxC;;AAEKC,QAAN,CAAaV,KAAb,EAAoB9B,KAApB,EAA2BM,UAA3B,EAAuCtD,OAAvC,EAAgD;AAAA;;AAAA;AAC9C,YAAMgE,YAAY,OAAKe,eAAL,CAAqBD,KAArB,EAA4B9B,KAA5B,EAAmCM,UAAnC,EAA+CtD,OAA/C,CAAlB;;AAEA,YAAM,OAAKgC,OAAL,CAAagC,UAAUpC,GAAvB,EAA4BoC,UAAUvB,MAAtC,CAAN;;AAEA,aAAO,IAAP;AAL8C;AAM/C;;AAEKgD,QAAN,CAAaX,KAAb,EAAoB9B,KAApB,EAA2BhD,OAA3B,EAAoC;AAAA;;AAAA;AAClC,YAAMgE,YAAY,OAAKqB,eAAL,CAAqBP,KAArB,EAA4B9B,KAA5B,CAAlB;;AAEA,YAAM,OAAKhB,OAAL,CAAagC,UAAUpC,GAAvB,EAA4BoC,UAAUvB,MAAtC,CAAN;;AAEA,aAAO,IAAP;AALkC;AAMnC;;AAEDiD,aAAWnE,KAAX,EAAkBoE,MAAlB,EAA0B;AACxB,QAAIpE,SAAS,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAIzB,SAASM,eAAT,CAAyBuF,OAAOzF,IAAhC,CAAJ,EAA2C;AACzC,aAAOJ,SAASM,eAAT,CAAyBuF,OAAOzF,IAAhC,EAAsCwF,UAAtC,CAAiDnE,KAAjD,EAAwDoE,MAAxD,CAAP;AACD;;AAED,YAAQA,OAAOzF,IAAf;AACE,WAAK,QAAL;AACE,eAAOqB,MAAMqE,QAAN,EAAP;;AAEF,WAAK,SAAL;AACE,eAAO,CAACrE,KAAR;;AAEF,WAAK,QAAL;AACE,eAAO,CAACA,KAAR;;AAEF,WAAK,SAAL;AACE,eAAO,CAAC,CAACA,KAAT;;AAEF,WAAK,UAAL;AACE,eAAOA,KAAP;;AAEF,WAAK,MAAL;AACE,eAAOsE,KAAKC,SAAL,CAAevE,KAAf,CAAP;;AAEF;AACE,eAAOA,MAAMqE,QAAN,EAAP;AApBJ;AAsBD;;AAEDG,eAAaxE,KAAb,EAAoBoE,MAApB,EAA4B;AAC1B,QAAIpE,SAAS,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAIzB,SAASM,eAAT,CAAyBuF,OAAOzF,IAAhC,CAAJ,EAA2C;AACzC,aAAOJ,SAASM,eAAT,CAAyBuF,OAAOzF,IAAhC,EAAsC6F,YAAtC,CAAmDxE,KAAnD,EAA0DoE,MAA1D,CAAP;AACD;;AAED,YAAQA,OAAOzF,IAAf;AACE,WAAK,QAAL;AACE,eAAOqB,MAAMqE,QAAN,EAAP;;AAEF,WAAK,SAAL;AACE,eAAO,CAACrE,KAAR;;AAEF,WAAK,QAAL;AACE,eAAO,CAACA,KAAR;;AAEF,WAAK,SAAL;AACE,eAAO,CAAC,CAACA,KAAT;;AAEF,WAAK,UAAL;AACE,eAAO,IAAIV,IAAJ,CAAS,CAACU,KAAV,CAAP;;AAEF,WAAK,MAAL;AACE,eAAOsE,KAAKG,KAAL,CAAWzE,KAAX,CAAP;;AAEF;AACE,eAAOA,MAAMqE,QAAN,EAAP;AApBJ;AAsBD;AAnY2B;kBAAT9F,Q;AAAAA,Q,CACZM,e,GAAkB,E","file":"database.js","sourcesContent":["import { format } from 'util';\nimport esc from './esc';\nimport humanizeDuration from 'humanize-duration';\n\nconst shortEnglishHumanizer = humanizeDuration.humanizer({\n  language: 'shortEn',\n  languages: {\n    shortEn: {\n      ms: () => 'ms'\n    }\n  }\n});\n\nexport default class Database {\n  static TYPE_CONVERTERS = {};\n\n  constructor(options) {\n    this.options = options;\n  }\n\n  static setTypeConverter(type, converter) {\n    if (converter) {\n      Database.TYPE_CONVERTERS[type] = converter;\n    } else if (type) {\n      delete Database.TYPE_CONVERTERS[type];\n    }\n  }\n\n  get verbose() {\n    return false;\n    // return true;\n  }\n\n  log(message) {\n    // if (Database.debug) {\n    //   console.warn('[SQL]', message);\n    // }\n  }\n\n  static async measure(text, block) {\n    if (!Database.debug) {\n      return await block();\n    }\n\n    const start = new Date().getTime();\n\n    let result = null;\n    let error = null;\n\n    try {\n      result = await block();\n    } catch (ex) {\n      error = ex;\n    }\n\n    const total = (new Date().getTime()) - start;\n\n    console.log('[SQL][' + shortEnglishHumanizer(total, {spacer: '', units: [ 'ms' ]}) + ']' + (error ? '[ERROR] ' : ' ') + text);\n\n    if (error) {\n      throw error;\n    }\n\n    return result;\n  }\n\n  ident(value) {\n    return esc(value, '`');\n  }\n\n  literal(value) {\n    return esc(value, \"'\");\n  }\n\n  async open() {\n    return null;\n  }\n\n  async close() {\n    return null;\n  }\n\n  async each(sql, params, callback) {\n    return await Database.measure(sql, async () => {\n      return await this._each(sql, params, callback);\n    });\n  }\n\n  async execute(sql, params) {\n    return await Database.measure(sql, async () => {\n      return await this._execute(sql, params);\n    });\n  }\n\n  beginTransaction() {\n    return this.execute('BEGIN TRANSACTION;');\n  }\n\n  commit() {\n    return this.execute('COMMIT TRANSACTION;');\n  }\n\n  rollback() {\n    return this.execute('ROLLBACK TRANSACTION;');\n  }\n\n  async transaction(block) {\n    await this.beginTransaction();\n\n    try {\n      await block(this);\n      await this.commit();\n    } catch (ex) {\n      console.log('ERROR IN TRANSACTION', ex);\n      await this.rollback();\n      throw ex;\n    }\n  }\n\n  async all(sql, params) {\n    const rows = [];\n\n    await this.each(sql, params, ({columns, values, index, cursor}) => {\n      if (values) {\n        rows.push(values);\n      }\n    });\n\n    return rows;\n  }\n\n  async get(sql, params) {\n    const rows = [];\n\n    await this.each(sql, params, ({columns, values, index, cursor}) => {\n      if (values) {\n        rows.push(values);\n      }\n    });\n\n    return (rows.length ? rows[0] : null);\n  }\n\n  buildWhere(where) {\n    const clause = [];\n    const values = [];\n\n    if (where) {\n      for (const key of Object.keys(where)) {\n        const value = where[key];\n\n        if (value != null) {\n          clause.push(this.ident(key) + ' = ?');\n          values.push(value);\n        } else {\n          clause.push(this.ident(key) + ' IS NULL');\n        }\n      }\n    }\n\n    return [ clause, values ];\n  }\n\n  buildInsert(attributes) {\n    const names = [];\n    const values = [];\n    const placeholders = [];\n\n    for (const key of Object.keys(attributes)) {\n      names.push(this.ident(key));\n      placeholders.push('?');\n\n      const value = attributes[key];\n\n      if (Array.isArray(value)) {\n        values.push('\\t' + value.join('\\t') + '\\t');\n      } else {\n        values.push(value);\n      }\n    }\n\n    return [ names, placeholders, values ];\n  }\n\n  buildUpdate(attributes) {\n    const sets = [];\n    const values = [];\n\n    for (const name of Object.keys(attributes)) {\n      sets.push(this.ident(name) + ' = ?');\n\n      const value = attributes[name];\n\n      if (Array.isArray(value)) {\n        values.push('\\t' + value.join('\\t') + '\\t');\n      } else {\n        values.push(value);\n      }\n    }\n\n    return [ sets, values ];\n  }\n\n  findEachByAttributes(options, callback) {\n    const statement = this.findStatement(options.tableName,\n                                         options.columns,\n                                         options.where,\n                                         options.orderBy,\n                                         options.limit,\n                                         options.offset);\n\n    return this.each(statement.sql, statement.values, callback);\n  }\n\n  findAllByAttributes(tableName, columns, where, orderBy, limit, offset) {\n    const statement = this.findStatement(tableName, columns, where, orderBy, limit, offset);\n\n    return this.all(statement.sql, statement.values);\n  }\n\n  async findFirstByAttributes(tableName, columns, attributes, orderBy) {\n    const rows = await this.findAllByAttributes(tableName, columns, attributes, orderBy, 1);\n\n    return rows != null ? rows[0] : null;\n  }\n\n  trace() {\n    return null;\n  }\n\n  profile(sql, time) {\n    console.log('PROFILE', '(' + time + 'ms)', sql);\n  }\n\n  findStatement(tableName, columns, where, orderBy, limit, offset) {\n    const selection = (columns == null ? [ '*' ] : columns);\n\n    const [ clause, values ] = this.buildWhere(where);\n\n    const parts = [];\n\n    if (clause.length > 0) {\n      parts.push(format(' WHERE %s', clause.join(' AND ')));\n    }\n\n    if (orderBy != null) {\n      parts.push(format(' ORDER BY %s', orderBy));\n    }\n\n    if (limit != null) {\n      parts.push(format(' LIMIT %s', this.literal(limit)));\n    }\n\n    if (offset != null) {\n      parts.push(format(' OFFSET %s', this.literal(offset)));\n    }\n\n    const sql = format('SELECT %s FROM %s%s',\n                       selection.join(', '),\n                       this.ident(tableName),\n                       parts.join(''));\n\n    return {sql, values};\n  }\n\n  insertStatement(table, attributes) {\n    const [ names, placeholders, values ] = this.buildInsert(attributes);\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES (%s);',\n                       table,\n                       names.join(', '),\n                       placeholders.join(', '));\n\n    return {sql, values};\n  }\n\n  updateStatement(table, where, attributes, options) {\n    const values = [];\n\n    const [ sets, updateValues ] = this.buildUpdate(attributes);\n\n    values.push.apply(values, updateValues);\n\n    if (options && options.raw) {\n      for (const name of Object.keys(options.raw)) {\n        sets.push(format('%s = %s', name, options.raw[name]));\n      }\n    }\n\n    const [ clause, whereValues ] = this.buildWhere(where);\n\n    values.push.apply(values, whereValues);\n\n    const whereClause = clause.length ? ' WHERE ' + clause.join(' AND ') : '';\n\n    const sql = format('UPDATE %s SET %s%s;',\n                       table, sets.join(', '), whereClause);\n\n    return {sql, values};\n  }\n\n  deleteStatement(table, where) {\n    const [ clause, values ] = this.buildWhere(where);\n\n    const whereClause = clause.length ? ' WHERE ' + clause.join(' AND ') : '';\n\n    const sql = format('DELETE FROM %s%s;',\n                       table, whereClause);\n\n    return {sql, values};\n  }\n\n  async insert(table, attributes, options) {\n    const statement = this.insertStatement(table, attributes);\n\n    await this.execute(statement.sql, statement.values);\n\n    return this.lastID;\n  }\n\n  async update(table, where, attributes, options) {\n    const statement = this.updateStatement(table, where, attributes, options);\n\n    await this.execute(statement.sql, statement.values);\n\n    return null;\n  }\n\n  async delete(table, where, options) {\n    const statement = this.deleteStatement(table, where);\n\n    await this.execute(statement.sql, statement.values);\n\n    return null;\n  }\n\n  toDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    if (Database.TYPE_CONVERTERS[column.type]) {\n      return Database.TYPE_CONVERTERS[column.type].toDatabase(value, column);\n    }\n\n    switch (column.type) {\n      case 'string':\n        return value.toString();\n\n      case 'integer':\n        return +value;\n\n      case 'double':\n        return +value;\n\n      case 'boolean':\n        return !!value;\n\n      case 'datetime':\n        return value;\n\n      case 'json':\n        return JSON.stringify(value);\n\n      default:\n        return value.toString();\n    }\n  }\n\n  fromDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    if (Database.TYPE_CONVERTERS[column.type]) {\n      return Database.TYPE_CONVERTERS[column.type].fromDatabase(value, column);\n    }\n\n    switch (column.type) {\n      case 'string':\n        return value.toString();\n\n      case 'integer':\n        return +value;\n\n      case 'double':\n        return +value;\n\n      case 'boolean':\n        return !!value;\n\n      case 'datetime':\n        return new Date(+value);\n\n      case 'json':\n        return JSON.parse(value);\n\n      default:\n        return value.toString();\n    }\n  }\n}\n"]}