{"version":3,"sources":["../src/database.js"],"names":[],"mappings":"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","file":"database.js","sourcesContent":["import { format } from 'util';\nimport esc from './esc';\n\nexport default class Database {\n  constructor(options) {\n    this.options = options;\n  }\n\n  get verbose() {\n    return false;\n    // return true;\n  }\n\n  log(message) {\n    if (Database.debug) {\n      console.warn('[SQL]', message);\n    }\n  }\n\n  ident(value) {\n    return esc(value, '`');\n  }\n\n  literal(value) {\n    return esc(value, \"'\");\n  }\n\n  async open() {\n    return null;\n  }\n\n  async close() {\n    return null;\n  }\n\n  async each(sql, params, callback) {\n    return null;\n  }\n\n  async execute(sql, params) {\n    return null;\n  }\n\n  beginTransaction() {\n    return this.execute('BEGIN TRANSACTION;');\n  }\n\n  commit() {\n    return this.execute('COMMIT TRANSACTION;');\n  }\n\n  rollback() {\n    return this.execute('ROLLBACK TRANSACTION;');\n  }\n\n  async transaction(block) {\n    await this.beginTransaction();\n\n    try {\n      await block(this);\n      await this.commit();\n    } catch (ex) {\n      console.log('ERROR IN TRANSACTION', ex);\n      await this.rollback();\n      throw ex;\n    }\n  }\n\n  async all(sql, params) {\n    const rows = [];\n\n    await this.each(sql, params, (columns, row, index) => {\n      if (row) {\n        rows.push(row);\n      }\n    });\n\n    return rows;\n  }\n\n  async get(sql, params) {\n    const rows = [];\n\n    await this.each(sql, params, (columns, row, index) => {\n      if (row) {\n        rows.push(row);\n      }\n    });\n\n    return (rows.length ? rows[0] : null);\n  }\n\n  buildWhere(where) {\n    const clause = [];\n    const values = [];\n\n    if (where) {\n      for (const key of Object.keys(where)) {\n        clause.push(this.ident(key) + ' = ?');\n        values.push(where[key]);\n      }\n    }\n\n    return [ clause, values ];\n  }\n\n  buildInsert(attributes) {\n    const names = [];\n    const values = [];\n    const placeholders = [];\n\n    for (const key of Object.keys(attributes)) {\n      names.push(this.ident(key));\n      placeholders.push('?');\n\n      const value = attributes[key];\n\n      if (Array.isArray(value)) {\n        values.push('\\t' + value.join('\\t') + '\\t');\n      } else {\n        values.push(value);\n      }\n    }\n\n    return [ names, placeholders, values ];\n  }\n\n  buildUpdate(attributes) {\n    const sets = [];\n    const values = [];\n\n    for (const name of Object.keys(attributes)) {\n      sets.push(this.ident(name) + ' = ?');\n\n      const value = attributes[name];\n\n      if (Array.isArray(value)) {\n        values.push('\\t' + value.join('\\t') + '\\t');\n      } else {\n        values.push(value);\n      }\n    }\n\n    return [ sets, values ];\n  }\n\n  findEachByAttributes(options, callback) {\n    const statement = this.findStatement(options.tableName,\n                                         options.columns,\n                                         options.where,\n                                         options.orderBy,\n                                         options.limit,\n                                         options.offset);\n\n    return this.each(statement.sql, statement.values, callback);\n  }\n\n  findAllByAttributes(tableName, columns, where, orderBy, limit, offset) {\n    const statement = this.findStatement(tableName, columns, where, orderBy, limit, offset);\n\n    return this.all(statement.sql, statement.values);\n  }\n\n  async findFirstByAttributes(tableName, columns, attributes, orderBy) {\n    const rows = await this.findAllByAttributes(tableName, columns, attributes, orderBy, 1);\n\n    return rows != null ? rows[0] : null;\n  }\n\n  trace() {\n    return null;\n  }\n\n  profile(sql, time) {\n    console.log('PROFILE', '(' + time + 'ms)', sql);\n  }\n\n  findStatement(tableName, columns, where, orderBy, limit, offset) {\n    const selection = (columns == null ? [ '*' ] : columns);\n\n    const [ clause, values ] = this.buildWhere(where);\n\n    const parts = [];\n\n    if (clause.length > 0) {\n      parts.push(format(' WHERE %s', clause.join(' AND ')));\n    }\n\n    if (orderBy != null) {\n      parts.push(format(' ORDER BY %s', orderBy));\n    }\n\n    if (limit != null) {\n      parts.push(format(' LIMIT %s', this.literal(limit)));\n    }\n\n    if (offset != null) {\n      parts.push(format(' OFFSET %s', this.literal(offset)));\n    }\n\n    const sql = format('SELECT %s FROM %s%s',\n                       selection.join(', '),\n                       this.ident(tableName),\n                       parts.join(''));\n\n    return {sql, values};\n  }\n\n  insertStatement(table, attributes) {\n    const [ names, placeholders, values ] = this.buildInsert(attributes);\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES (%s);',\n                       table,\n                       names.join(', '),\n                       placeholders.join(', '));\n\n    return {sql, values};\n  }\n\n  updateStatement(table, where, attributes, options) {\n    const values = [];\n\n    const [ sets, updateValues ] = this.buildUpdate(attributes);\n\n    values.push.apply(values, updateValues);\n\n    if (options && options.raw) {\n      for (const name of Object.keys(options.raw)) {\n        sets.push(format('%s = %s', name, options.raw[name]));\n      }\n    }\n\n    const [ clause, whereValues ] = this.buildWhere(where);\n\n    values.push.apply(values, whereValues);\n\n    const whereClause = clause.length ? ' WHERE ' + clause.join(' AND ') : '';\n\n    const sql = format('UPDATE %s SET %s%s;',\n                       table, sets.join(', '), whereClause);\n\n    return {sql, values};\n  }\n\n  deleteStatement(table, where) {\n    const [ clause, values ] = this.buildWhere(where);\n\n    const whereClause = clause.length ? ' WHERE ' + clause.join(' AND ') : '';\n\n    const sql = format('DELETE FROM %s%s;',\n                       table, whereClause);\n\n    return {sql, values};\n  }\n\n  async insert(table, attributes, options) {\n    const statement = this.insertStatement(table, attributes);\n\n    await this.execute(statement.sql, statement.values);\n\n    return this.lastID;\n  }\n\n  async update(table, where, attributes, options) {\n    const statement = this.updateStatement(table, where, attributes, options);\n\n    await this.execute(statement.sql, statement.values);\n\n    return null;\n  }\n\n  async delete(table, where, options) {\n    const statement = this.deleteStatement(table, where);\n\n    await this.execute(statement.sql, statement.values);\n\n    return null;\n  }\n\n  toDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'string':\n        return value.toString();\n\n      case 'integer':\n        return +value;\n\n      case 'double':\n        return +value;\n\n      case 'boolean':\n        return !!value;\n\n      case 'datetime':\n        return value;\n\n      case 'json':\n        return JSON.stringify(value);\n\n      default:\n        return value.toString();\n    }\n  }\n\n  fromDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'string':\n        return value.toString();\n\n      case 'integer':\n        return +value;\n\n      case 'double':\n        return +value;\n\n      case 'boolean':\n        return !!value;\n\n      case 'datetime':\n        return new Date(+value);\n\n      case 'json':\n        return JSON.parse(value);\n\n      default:\n        return value.toString();\n    }\n  }\n}\n"]}