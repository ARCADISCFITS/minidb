{"version":3,"sources":["../src/database-cursor.js"],"names":["DatabaseCursor","constructor","connection","rawCursor","converter","_connection","_rawCursor","_finished","parseValues","columns","values","parsedValues","i","length","value","column","name","hasRows","next","Promise","resolve","reject","err","finished","index","client","close"],"mappings":";;;;;;;;AAAe,MAAMA,cAAN,CAAqB;AAClCC,cAAYC,UAAZ,EAAwBC,SAAxB,EAAmCC,SAAnC,EAA8C;AAC5C,SAAKC,WAAL,GAAmBH,UAAnB;AACA,SAAKI,UAAL,GAAkBH,SAAlB;AACA,SAAKI,SAAL,GAAiB,KAAjB;AACD;;AAED,MAAIL,UAAJ,GAAiB;AACf,WAAO,KAAKG,WAAZ;AACD;;AAEDG,cAAYC,OAAZ,EAAqBC,MAArB,EAA6B;AAC3B,QAAIC,eAAe,IAAnB;;AAEA,QAAID,MAAJ,EAAY;AACVC,qBAAe,EAAf;;AAEA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,QAAQI,MAA5B,EAAoC,EAAED,CAAtC,EAAyC;AACvC,YAAIE,QAAQJ,OAAOE,CAAP,CAAZ;AACA,cAAMG,SAASN,QAAQG,CAAR,CAAf;;AAEA,YAAIE,SAAS,IAAT,IAAiB,KAAKV,SAA1B,EAAqC;AACnCU,kBAAQ,KAAKV,SAAL,CAAe,EAACW,cAAD,EAASD,YAAT,EAAf,CAAR;AACD;;AAEDH,qBAAaI,OAAOC,IAApB,IAA4BF,KAA5B;AACD;AACF;;AAED,WAAOH,YAAP;AACD;;AAED,MAAIM,OAAJ,GAAc;AACZ,WAAO,CAAC,KAAKV,SAAb;AACD;;AAEKW,MAAN,GAAa;AAAA;;AAAA;AACX,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAKf,UAAL,CAAgBY,IAAhB,CAAqB,UAACI,GAAD,QAAqD;AAAA,cAA9CC,QAA8C,QAA9CA,QAA8C;AAAA,cAApCd,OAAoC,QAApCA,OAAoC;AAAA,cAA3BC,MAA2B,QAA3BA,MAA2B;AAAA,cAAnBc,KAAmB,QAAnBA,KAAmB;AAAA,cAAZC,MAAY,QAAZA,MAAY;;AACxE,gBAAKlB,SAAL,GAAiBgB,QAAjB;;AAEA,cAAID,GAAJ,EAAS;AACP,mBAAOD,OAAOC,GAAP,CAAP;AACD,WAFD,MAEO,IAAIC,QAAJ,EAAc;AACnB,mBAAOH,QAAQ,IAAR,CAAP;AACD;;AAED,iBAAOA,QAAQ,EAACX,SAASA,OAAV;AACCC,oBAAQD,WAAW,MAAKD,WAAL,CAAiBC,OAAjB,EAA0BC,MAA1B,CADpB;AAECc,mBAAOA,KAFR;AAGCC,0BAHD,EAAR,CAAP;AAID,SAbD;AAcD,OAfM,CAAP;AADW;AAiBZ;;AAEKC,OAAN,GAAc;AAAA;;AAAA;AACZ;AACA,aAAO,CAAC,OAAKpB,UAAL,CAAgBiB,QAAxB,EAAkC;AAChC,cAAM,OAAKL,IAAL,EAAN;AACD;AAJW;AAKb;AA5DiC;kBAAflB,c","file":"database-cursor.js","sourcesContent":["export default class DatabaseCursor {\n  constructor(connection, rawCursor, converter) {\n    this._connection = connection;\n    this._rawCursor = rawCursor;\n    this._finished = false;\n  }\n\n  get connection() {\n    return this._connection;\n  }\n\n  parseValues(columns, values) {\n    let parsedValues = null;\n\n    if (values) {\n      parsedValues = {};\n\n      for (let i = 0; i < columns.length; ++i) {\n        let value = values[i];\n        const column = columns[i];\n\n        if (value != null && this.converter) {\n          value = this.converter({column, value});\n        }\n\n        parsedValues[column.name] = value;\n      }\n    }\n\n    return parsedValues;\n  }\n\n  get hasRows() {\n    return !this._finished;\n  }\n\n  async next() {\n    return new Promise((resolve, reject) => {\n      this._rawCursor.next((err, {finished, columns, values, index, client}) => {\n        this._finished = finished;\n\n        if (err) {\n          return reject(err);\n        } else if (finished) {\n          return resolve(null);\n        }\n\n        return resolve({columns: columns,\n                        values: columns && this.parseValues(columns, values),\n                        index: index,\n                        client});\n      });\n    });\n  }\n\n  async close() {\n    // exhaust the cursor to completion\n    while (!this._rawCursor.finished) {\n      await this.next();\n    }\n  }\n}\n"]}